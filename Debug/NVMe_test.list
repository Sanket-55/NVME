
NVMe_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000184  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000016f4  08000184  08000184  00001184  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08001878  08001878  00002878  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001888  08001888  0000300c  2**0
                  CONTENTS
  4 .ARM          00000008  08001888  08001888  00002888  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08001890  08001890  0000300c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001890  08001890  00002890  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001894  08001894  00002894  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08001898  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000024  2000000c  080018a4  0000300c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000030  080018a4  00003030  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000300c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00003a61  00000000  00000000  00003035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001167  00000000  00000000  00006a96  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000458  00000000  00000000  00007c00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000031e  00000000  00000000  00008058  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001e7e5  00000000  00000000  00008376  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000059e7  00000000  00000000  00026b5b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b7ce2  00000000  00000000  0002c542  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e4224  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000fd8  00000000  00000000  000e4268  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005c  00000000  00000000  000e5240  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000184 <__do_global_dtors_aux>:
 8000184:	b510      	push	{r4, lr}
 8000186:	4c05      	ldr	r4, [pc, #20]	@ (800019c <__do_global_dtors_aux+0x18>)
 8000188:	7823      	ldrb	r3, [r4, #0]
 800018a:	b933      	cbnz	r3, 800019a <__do_global_dtors_aux+0x16>
 800018c:	4b04      	ldr	r3, [pc, #16]	@ (80001a0 <__do_global_dtors_aux+0x1c>)
 800018e:	b113      	cbz	r3, 8000196 <__do_global_dtors_aux+0x12>
 8000190:	4804      	ldr	r0, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x20>)
 8000192:	f3af 8000 	nop.w
 8000196:	2301      	movs	r3, #1
 8000198:	7023      	strb	r3, [r4, #0]
 800019a:	bd10      	pop	{r4, pc}
 800019c:	2000000c 	.word	0x2000000c
 80001a0:	00000000 	.word	0x00000000
 80001a4:	08001860 	.word	0x08001860

080001a8 <frame_dummy>:
 80001a8:	b508      	push	{r3, lr}
 80001aa:	4b03      	ldr	r3, [pc, #12]	@ (80001b8 <frame_dummy+0x10>)
 80001ac:	b11b      	cbz	r3, 80001b6 <frame_dummy+0xe>
 80001ae:	4903      	ldr	r1, [pc, #12]	@ (80001bc <frame_dummy+0x14>)
 80001b0:	4803      	ldr	r0, [pc, #12]	@ (80001c0 <frame_dummy+0x18>)
 80001b2:	f3af 8000 	nop.w
 80001b6:	bd08      	pop	{r3, pc}
 80001b8:	00000000 	.word	0x00000000
 80001bc:	20000010 	.word	0x20000010
 80001c0:	08001860 	.word	0x08001860

080001c4 <__aeabi_uldivmod>:
 80001c4:	b953      	cbnz	r3, 80001dc <__aeabi_uldivmod+0x18>
 80001c6:	b94a      	cbnz	r2, 80001dc <__aeabi_uldivmod+0x18>
 80001c8:	2900      	cmp	r1, #0
 80001ca:	bf08      	it	eq
 80001cc:	2800      	cmpeq	r0, #0
 80001ce:	bf1c      	itt	ne
 80001d0:	f04f 31ff 	movne.w	r1, #4294967295
 80001d4:	f04f 30ff 	movne.w	r0, #4294967295
 80001d8:	f000 b968 	b.w	80004ac <__aeabi_idiv0>
 80001dc:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e4:	f000 f806 	bl	80001f4 <__udivmoddi4>
 80001e8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001ec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f0:	b004      	add	sp, #16
 80001f2:	4770      	bx	lr

080001f4 <__udivmoddi4>:
 80001f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001f8:	9d08      	ldr	r5, [sp, #32]
 80001fa:	460c      	mov	r4, r1
 80001fc:	2b00      	cmp	r3, #0
 80001fe:	d14e      	bne.n	800029e <__udivmoddi4+0xaa>
 8000200:	4694      	mov	ip, r2
 8000202:	458c      	cmp	ip, r1
 8000204:	4686      	mov	lr, r0
 8000206:	fab2 f282 	clz	r2, r2
 800020a:	d962      	bls.n	80002d2 <__udivmoddi4+0xde>
 800020c:	b14a      	cbz	r2, 8000222 <__udivmoddi4+0x2e>
 800020e:	f1c2 0320 	rsb	r3, r2, #32
 8000212:	4091      	lsls	r1, r2
 8000214:	fa20 f303 	lsr.w	r3, r0, r3
 8000218:	fa0c fc02 	lsl.w	ip, ip, r2
 800021c:	4319      	orrs	r1, r3
 800021e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000222:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000226:	fbb1 f4f7 	udiv	r4, r1, r7
 800022a:	fb07 1114 	mls	r1, r7, r4, r1
 800022e:	fa1f f68c 	uxth.w	r6, ip
 8000232:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000236:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023a:	fb04 f106 	mul.w	r1, r4, r6
 800023e:	4299      	cmp	r1, r3
 8000240:	d90a      	bls.n	8000258 <__udivmoddi4+0x64>
 8000242:	eb1c 0303 	adds.w	r3, ip, r3
 8000246:	f104 30ff 	add.w	r0, r4, #4294967295
 800024a:	f080 8110 	bcs.w	800046e <__udivmoddi4+0x27a>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 810d 	bls.w	800046e <__udivmoddi4+0x27a>
 8000254:	3c02      	subs	r4, #2
 8000256:	4463      	add	r3, ip
 8000258:	1a59      	subs	r1, r3, r1
 800025a:	fbb1 f0f7 	udiv	r0, r1, r7
 800025e:	fb07 1110 	mls	r1, r7, r0, r1
 8000262:	fb00 f606 	mul.w	r6, r0, r6
 8000266:	fa1f f38e 	uxth.w	r3, lr
 800026a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800026e:	429e      	cmp	r6, r3
 8000270:	d90a      	bls.n	8000288 <__udivmoddi4+0x94>
 8000272:	eb1c 0303 	adds.w	r3, ip, r3
 8000276:	f100 31ff 	add.w	r1, r0, #4294967295
 800027a:	f080 80fa 	bcs.w	8000472 <__udivmoddi4+0x27e>
 800027e:	429e      	cmp	r6, r3
 8000280:	f240 80f7 	bls.w	8000472 <__udivmoddi4+0x27e>
 8000284:	4463      	add	r3, ip
 8000286:	3802      	subs	r0, #2
 8000288:	2100      	movs	r1, #0
 800028a:	1b9b      	subs	r3, r3, r6
 800028c:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000290:	b11d      	cbz	r5, 800029a <__udivmoddi4+0xa6>
 8000292:	40d3      	lsrs	r3, r2
 8000294:	2200      	movs	r2, #0
 8000296:	e9c5 3200 	strd	r3, r2, [r5]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d905      	bls.n	80002ae <__udivmoddi4+0xba>
 80002a2:	b10d      	cbz	r5, 80002a8 <__udivmoddi4+0xb4>
 80002a4:	e9c5 0100 	strd	r0, r1, [r5]
 80002a8:	2100      	movs	r1, #0
 80002aa:	4608      	mov	r0, r1
 80002ac:	e7f5      	b.n	800029a <__udivmoddi4+0xa6>
 80002ae:	fab3 f183 	clz	r1, r3
 80002b2:	2900      	cmp	r1, #0
 80002b4:	d146      	bne.n	8000344 <__udivmoddi4+0x150>
 80002b6:	42a3      	cmp	r3, r4
 80002b8:	d302      	bcc.n	80002c0 <__udivmoddi4+0xcc>
 80002ba:	4290      	cmp	r0, r2
 80002bc:	f0c0 80ee 	bcc.w	800049c <__udivmoddi4+0x2a8>
 80002c0:	1a86      	subs	r6, r0, r2
 80002c2:	eb64 0303 	sbc.w	r3, r4, r3
 80002c6:	2001      	movs	r0, #1
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	d0e6      	beq.n	800029a <__udivmoddi4+0xa6>
 80002cc:	e9c5 6300 	strd	r6, r3, [r5]
 80002d0:	e7e3      	b.n	800029a <__udivmoddi4+0xa6>
 80002d2:	2a00      	cmp	r2, #0
 80002d4:	f040 808f 	bne.w	80003f6 <__udivmoddi4+0x202>
 80002d8:	eba1 040c 	sub.w	r4, r1, ip
 80002dc:	2101      	movs	r1, #1
 80002de:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e2:	fa1f f78c 	uxth.w	r7, ip
 80002e6:	fbb4 f6f8 	udiv	r6, r4, r8
 80002ea:	fb08 4416 	mls	r4, r8, r6, r4
 80002ee:	fb07 f006 	mul.w	r0, r7, r6
 80002f2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002f6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002fa:	4298      	cmp	r0, r3
 80002fc:	d908      	bls.n	8000310 <__udivmoddi4+0x11c>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 34ff 	add.w	r4, r6, #4294967295
 8000306:	d202      	bcs.n	800030e <__udivmoddi4+0x11a>
 8000308:	4298      	cmp	r0, r3
 800030a:	f200 80cb 	bhi.w	80004a4 <__udivmoddi4+0x2b0>
 800030e:	4626      	mov	r6, r4
 8000310:	1a1c      	subs	r4, r3, r0
 8000312:	fbb4 f0f8 	udiv	r0, r4, r8
 8000316:	fb08 4410 	mls	r4, r8, r0, r4
 800031a:	fb00 f707 	mul.w	r7, r0, r7
 800031e:	fa1f f38e 	uxth.w	r3, lr
 8000322:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000326:	429f      	cmp	r7, r3
 8000328:	d908      	bls.n	800033c <__udivmoddi4+0x148>
 800032a:	eb1c 0303 	adds.w	r3, ip, r3
 800032e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x146>
 8000334:	429f      	cmp	r7, r3
 8000336:	f200 80ae 	bhi.w	8000496 <__udivmoddi4+0x2a2>
 800033a:	4620      	mov	r0, r4
 800033c:	1bdb      	subs	r3, r3, r7
 800033e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000342:	e7a5      	b.n	8000290 <__udivmoddi4+0x9c>
 8000344:	f1c1 0720 	rsb	r7, r1, #32
 8000348:	408b      	lsls	r3, r1
 800034a:	fa22 fc07 	lsr.w	ip, r2, r7
 800034e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000352:	fa24 f607 	lsr.w	r6, r4, r7
 8000356:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800035a:	fbb6 f8f9 	udiv	r8, r6, r9
 800035e:	fa1f fe8c 	uxth.w	lr, ip
 8000362:	fb09 6618 	mls	r6, r9, r8, r6
 8000366:	fa20 f307 	lsr.w	r3, r0, r7
 800036a:	408c      	lsls	r4, r1
 800036c:	fa00 fa01 	lsl.w	sl, r0, r1
 8000370:	fb08 f00e 	mul.w	r0, r8, lr
 8000374:	431c      	orrs	r4, r3
 8000376:	0c23      	lsrs	r3, r4, #16
 8000378:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800037c:	4298      	cmp	r0, r3
 800037e:	fa02 f201 	lsl.w	r2, r2, r1
 8000382:	d90a      	bls.n	800039a <__udivmoddi4+0x1a6>
 8000384:	eb1c 0303 	adds.w	r3, ip, r3
 8000388:	f108 36ff 	add.w	r6, r8, #4294967295
 800038c:	f080 8081 	bcs.w	8000492 <__udivmoddi4+0x29e>
 8000390:	4298      	cmp	r0, r3
 8000392:	d97e      	bls.n	8000492 <__udivmoddi4+0x29e>
 8000394:	f1a8 0802 	sub.w	r8, r8, #2
 8000398:	4463      	add	r3, ip
 800039a:	1a1e      	subs	r6, r3, r0
 800039c:	fbb6 f3f9 	udiv	r3, r6, r9
 80003a0:	fb09 6613 	mls	r6, r9, r3, r6
 80003a4:	fb03 fe0e 	mul.w	lr, r3, lr
 80003a8:	b2a4      	uxth	r4, r4
 80003aa:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
 80003ae:	45a6      	cmp	lr, r4
 80003b0:	d908      	bls.n	80003c4 <__udivmoddi4+0x1d0>
 80003b2:	eb1c 0404 	adds.w	r4, ip, r4
 80003b6:	f103 30ff 	add.w	r0, r3, #4294967295
 80003ba:	d266      	bcs.n	800048a <__udivmoddi4+0x296>
 80003bc:	45a6      	cmp	lr, r4
 80003be:	d964      	bls.n	800048a <__udivmoddi4+0x296>
 80003c0:	3b02      	subs	r3, #2
 80003c2:	4464      	add	r4, ip
 80003c4:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 80003c8:	fba0 8302 	umull	r8, r3, r0, r2
 80003cc:	eba4 040e 	sub.w	r4, r4, lr
 80003d0:	429c      	cmp	r4, r3
 80003d2:	46c6      	mov	lr, r8
 80003d4:	461e      	mov	r6, r3
 80003d6:	d350      	bcc.n	800047a <__udivmoddi4+0x286>
 80003d8:	d04d      	beq.n	8000476 <__udivmoddi4+0x282>
 80003da:	b155      	cbz	r5, 80003f2 <__udivmoddi4+0x1fe>
 80003dc:	ebba 030e 	subs.w	r3, sl, lr
 80003e0:	eb64 0406 	sbc.w	r4, r4, r6
 80003e4:	fa04 f707 	lsl.w	r7, r4, r7
 80003e8:	40cb      	lsrs	r3, r1
 80003ea:	431f      	orrs	r7, r3
 80003ec:	40cc      	lsrs	r4, r1
 80003ee:	e9c5 7400 	strd	r7, r4, [r5]
 80003f2:	2100      	movs	r1, #0
 80003f4:	e751      	b.n	800029a <__udivmoddi4+0xa6>
 80003f6:	fa0c fc02 	lsl.w	ip, ip, r2
 80003fa:	f1c2 0320 	rsb	r3, r2, #32
 80003fe:	40d9      	lsrs	r1, r3
 8000400:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000404:	fa20 f303 	lsr.w	r3, r0, r3
 8000408:	fa00 fe02 	lsl.w	lr, r0, r2
 800040c:	fbb1 f0f8 	udiv	r0, r1, r8
 8000410:	fb08 1110 	mls	r1, r8, r0, r1
 8000414:	4094      	lsls	r4, r2
 8000416:	431c      	orrs	r4, r3
 8000418:	fa1f f78c 	uxth.w	r7, ip
 800041c:	0c23      	lsrs	r3, r4, #16
 800041e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000422:	fb00 f107 	mul.w	r1, r0, r7
 8000426:	4299      	cmp	r1, r3
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x248>
 800042a:	eb1c 0303 	adds.w	r3, ip, r3
 800042e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000432:	d22c      	bcs.n	800048e <__udivmoddi4+0x29a>
 8000434:	4299      	cmp	r1, r3
 8000436:	d92a      	bls.n	800048e <__udivmoddi4+0x29a>
 8000438:	3802      	subs	r0, #2
 800043a:	4463      	add	r3, ip
 800043c:	1a5b      	subs	r3, r3, r1
 800043e:	fbb3 f1f8 	udiv	r1, r3, r8
 8000442:	fb08 3311 	mls	r3, r8, r1, r3
 8000446:	b2a4      	uxth	r4, r4
 8000448:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800044c:	fb01 f307 	mul.w	r3, r1, r7
 8000450:	42a3      	cmp	r3, r4
 8000452:	d908      	bls.n	8000466 <__udivmoddi4+0x272>
 8000454:	eb1c 0404 	adds.w	r4, ip, r4
 8000458:	f101 36ff 	add.w	r6, r1, #4294967295
 800045c:	d213      	bcs.n	8000486 <__udivmoddi4+0x292>
 800045e:	42a3      	cmp	r3, r4
 8000460:	d911      	bls.n	8000486 <__udivmoddi4+0x292>
 8000462:	3902      	subs	r1, #2
 8000464:	4464      	add	r4, ip
 8000466:	1ae4      	subs	r4, r4, r3
 8000468:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800046c:	e73b      	b.n	80002e6 <__udivmoddi4+0xf2>
 800046e:	4604      	mov	r4, r0
 8000470:	e6f2      	b.n	8000258 <__udivmoddi4+0x64>
 8000472:	4608      	mov	r0, r1
 8000474:	e708      	b.n	8000288 <__udivmoddi4+0x94>
 8000476:	45c2      	cmp	sl, r8
 8000478:	d2af      	bcs.n	80003da <__udivmoddi4+0x1e6>
 800047a:	ebb8 0e02 	subs.w	lr, r8, r2
 800047e:	eb63 060c 	sbc.w	r6, r3, ip
 8000482:	3801      	subs	r0, #1
 8000484:	e7a9      	b.n	80003da <__udivmoddi4+0x1e6>
 8000486:	4631      	mov	r1, r6
 8000488:	e7ed      	b.n	8000466 <__udivmoddi4+0x272>
 800048a:	4603      	mov	r3, r0
 800048c:	e79a      	b.n	80003c4 <__udivmoddi4+0x1d0>
 800048e:	4630      	mov	r0, r6
 8000490:	e7d4      	b.n	800043c <__udivmoddi4+0x248>
 8000492:	46b0      	mov	r8, r6
 8000494:	e781      	b.n	800039a <__udivmoddi4+0x1a6>
 8000496:	4463      	add	r3, ip
 8000498:	3802      	subs	r0, #2
 800049a:	e74f      	b.n	800033c <__udivmoddi4+0x148>
 800049c:	4606      	mov	r6, r0
 800049e:	4623      	mov	r3, r4
 80004a0:	4608      	mov	r0, r1
 80004a2:	e711      	b.n	80002c8 <__udivmoddi4+0xd4>
 80004a4:	3e02      	subs	r6, #2
 80004a6:	4463      	add	r3, ip
 80004a8:	e732      	b.n	8000310 <__udivmoddi4+0x11c>
 80004aa:	bf00      	nop

080004ac <__aeabi_idiv0>:
 80004ac:	4770      	bx	lr
 80004ae:	bf00      	nop

080004b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004b0:	b580      	push	{r7, lr}
 80004b2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004b4:	f000 fa54 	bl	8000960 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004b8:	f000 f80e 	bl	80004d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004bc:	f000 f854 	bl	8000568 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  //Flash_Write_NUM(0x0800C100, number);
  RxVal = Flash_Read_NUM(0x0800C100);
 80004c0:	4803      	ldr	r0, [pc, #12]	@ (80004d0 <main+0x20>)
 80004c2:	f000 f9b4 	bl	800082e <Flash_Read_NUM>
 80004c6:	4603      	mov	r3, r0
 80004c8:	4a02      	ldr	r2, [pc, #8]	@ (80004d4 <main+0x24>)
 80004ca:	6013      	str	r3, [r2, #0]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80004cc:	bf00      	nop
 80004ce:	e7fd      	b.n	80004cc <main+0x1c>
 80004d0:	0800c100 	.word	0x0800c100
 80004d4:	20000028 	.word	0x20000028

080004d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	b092      	sub	sp, #72	@ 0x48
 80004dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004de:	f107 0318 	add.w	r3, r7, #24
 80004e2:	2230      	movs	r2, #48	@ 0x30
 80004e4:	2100      	movs	r1, #0
 80004e6:	4618      	mov	r0, r3
 80004e8:	f001 f98e 	bl	8001808 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004ec:	1d3b      	adds	r3, r7, #4
 80004ee:	2200      	movs	r2, #0
 80004f0:	601a      	str	r2, [r3, #0]
 80004f2:	605a      	str	r2, [r3, #4]
 80004f4:	609a      	str	r2, [r3, #8]
 80004f6:	60da      	str	r2, [r3, #12]
 80004f8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
   *
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80004fa:	2302      	movs	r3, #2
 80004fc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80004fe:	2301      	movs	r3, #1
 8000500:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000502:	2310      	movs	r3, #16
 8000504:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000506:	2302      	movs	r3, #2
 8000508:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800050a:	2300      	movs	r3, #0
 800050c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLM = 13;
 800050e:	230d      	movs	r3, #13
 8000510:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLN = 195;
 8000512:	23c3      	movs	r3, #195	@ 0xc3
 8000514:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000516:	2302      	movs	r3, #2
 8000518:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLQ = 5;
 800051a:	2305      	movs	r3, #5
 800051c:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800051e:	f107 0318 	add.w	r3, r7, #24
 8000522:	4618      	mov	r0, r3
 8000524:	f000 fd24 	bl	8000f70 <HAL_RCC_OscConfig>
 8000528:	4603      	mov	r3, r0
 800052a:	2b00      	cmp	r3, #0
 800052c:	d001      	beq.n	8000532 <SystemClock_Config+0x5a>
  {
    Error_Handler();
 800052e:	f000 f93d 	bl	80007ac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000532:	230f      	movs	r3, #15
 8000534:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000536:	2302      	movs	r3, #2
 8000538:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800053a:	2300      	movs	r3, #0
 800053c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800053e:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000542:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000544:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000548:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800054a:	1d3b      	adds	r3, r7, #4
 800054c:	2103      	movs	r1, #3
 800054e:	4618      	mov	r0, r3
 8000550:	f000 ff62 	bl	8001418 <HAL_RCC_ClockConfig>
 8000554:	4603      	mov	r3, r0
 8000556:	2b00      	cmp	r3, #0
 8000558:	d001      	beq.n	800055e <SystemClock_Config+0x86>
  {
    Error_Handler();
 800055a:	f000 f927 	bl	80007ac <Error_Handler>
  }
}
 800055e:	bf00      	nop
 8000560:	3748      	adds	r7, #72	@ 0x48
 8000562:	46bd      	mov	sp, r7
 8000564:	bd80      	pop	{r7, pc}
	...

08000568 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b08c      	sub	sp, #48	@ 0x30
 800056c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800056e:	f107 031c 	add.w	r3, r7, #28
 8000572:	2200      	movs	r2, #0
 8000574:	601a      	str	r2, [r3, #0]
 8000576:	605a      	str	r2, [r3, #4]
 8000578:	609a      	str	r2, [r3, #8]
 800057a:	60da      	str	r2, [r3, #12]
 800057c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800057e:	2300      	movs	r3, #0
 8000580:	61bb      	str	r3, [r7, #24]
 8000582:	4b84      	ldr	r3, [pc, #528]	@ (8000794 <MX_GPIO_Init+0x22c>)
 8000584:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000586:	4a83      	ldr	r2, [pc, #524]	@ (8000794 <MX_GPIO_Init+0x22c>)
 8000588:	f043 0304 	orr.w	r3, r3, #4
 800058c:	6313      	str	r3, [r2, #48]	@ 0x30
 800058e:	4b81      	ldr	r3, [pc, #516]	@ (8000794 <MX_GPIO_Init+0x22c>)
 8000590:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000592:	f003 0304 	and.w	r3, r3, #4
 8000596:	61bb      	str	r3, [r7, #24]
 8000598:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800059a:	2300      	movs	r3, #0
 800059c:	617b      	str	r3, [r7, #20]
 800059e:	4b7d      	ldr	r3, [pc, #500]	@ (8000794 <MX_GPIO_Init+0x22c>)
 80005a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005a2:	4a7c      	ldr	r2, [pc, #496]	@ (8000794 <MX_GPIO_Init+0x22c>)
 80005a4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80005a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80005aa:	4b7a      	ldr	r3, [pc, #488]	@ (8000794 <MX_GPIO_Init+0x22c>)
 80005ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80005b2:	617b      	str	r3, [r7, #20]
 80005b4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005b6:	2300      	movs	r3, #0
 80005b8:	613b      	str	r3, [r7, #16]
 80005ba:	4b76      	ldr	r3, [pc, #472]	@ (8000794 <MX_GPIO_Init+0x22c>)
 80005bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005be:	4a75      	ldr	r2, [pc, #468]	@ (8000794 <MX_GPIO_Init+0x22c>)
 80005c0:	f043 0301 	orr.w	r3, r3, #1
 80005c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80005c6:	4b73      	ldr	r3, [pc, #460]	@ (8000794 <MX_GPIO_Init+0x22c>)
 80005c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005ca:	f003 0301 	and.w	r3, r3, #1
 80005ce:	613b      	str	r3, [r7, #16]
 80005d0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005d2:	2300      	movs	r3, #0
 80005d4:	60fb      	str	r3, [r7, #12]
 80005d6:	4b6f      	ldr	r3, [pc, #444]	@ (8000794 <MX_GPIO_Init+0x22c>)
 80005d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005da:	4a6e      	ldr	r2, [pc, #440]	@ (8000794 <MX_GPIO_Init+0x22c>)
 80005dc:	f043 0302 	orr.w	r3, r3, #2
 80005e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80005e2:	4b6c      	ldr	r3, [pc, #432]	@ (8000794 <MX_GPIO_Init+0x22c>)
 80005e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005e6:	f003 0302 	and.w	r3, r3, #2
 80005ea:	60fb      	str	r3, [r7, #12]
 80005ec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80005ee:	2300      	movs	r3, #0
 80005f0:	60bb      	str	r3, [r7, #8]
 80005f2:	4b68      	ldr	r3, [pc, #416]	@ (8000794 <MX_GPIO_Init+0x22c>)
 80005f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005f6:	4a67      	ldr	r2, [pc, #412]	@ (8000794 <MX_GPIO_Init+0x22c>)
 80005f8:	f043 0308 	orr.w	r3, r3, #8
 80005fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80005fe:	4b65      	ldr	r3, [pc, #404]	@ (8000794 <MX_GPIO_Init+0x22c>)
 8000600:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000602:	f003 0308 	and.w	r3, r3, #8
 8000606:	60bb      	str	r3, [r7, #8]
 8000608:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800060a:	2300      	movs	r3, #0
 800060c:	607b      	str	r3, [r7, #4]
 800060e:	4b61      	ldr	r3, [pc, #388]	@ (8000794 <MX_GPIO_Init+0x22c>)
 8000610:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000612:	4a60      	ldr	r2, [pc, #384]	@ (8000794 <MX_GPIO_Init+0x22c>)
 8000614:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000618:	6313      	str	r3, [r2, #48]	@ 0x30
 800061a:	4b5e      	ldr	r3, [pc, #376]	@ (8000794 <MX_GPIO_Init+0x22c>)
 800061c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800061e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000622:	607b      	str	r3, [r7, #4]
 8000624:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000626:	2200      	movs	r2, #0
 8000628:	f244 0181 	movw	r1, #16513	@ 0x4081
 800062c:	485a      	ldr	r0, [pc, #360]	@ (8000798 <MX_GPIO_Init+0x230>)
 800062e:	f000 fc87 	bl	8000f40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000632:	2200      	movs	r2, #0
 8000634:	2140      	movs	r1, #64	@ 0x40
 8000636:	4859      	ldr	r0, [pc, #356]	@ (800079c <MX_GPIO_Init+0x234>)
 8000638:	f000 fc82 	bl	8000f40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 800063c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000640:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000642:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000646:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000648:	2300      	movs	r3, #0
 800064a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800064c:	f107 031c 	add.w	r3, r7, #28
 8000650:	4619      	mov	r1, r3
 8000652:	4853      	ldr	r0, [pc, #332]	@ (80007a0 <MX_GPIO_Init+0x238>)
 8000654:	f000 fad6 	bl	8000c04 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000658:	2332      	movs	r3, #50	@ 0x32
 800065a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800065c:	2302      	movs	r3, #2
 800065e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000660:	2300      	movs	r3, #0
 8000662:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000664:	2303      	movs	r3, #3
 8000666:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000668:	230b      	movs	r3, #11
 800066a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800066c:	f107 031c 	add.w	r3, r7, #28
 8000670:	4619      	mov	r1, r3
 8000672:	484b      	ldr	r0, [pc, #300]	@ (80007a0 <MX_GPIO_Init+0x238>)
 8000674:	f000 fac6 	bl	8000c04 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000678:	2386      	movs	r3, #134	@ 0x86
 800067a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800067c:	2302      	movs	r3, #2
 800067e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000680:	2300      	movs	r3, #0
 8000682:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000684:	2303      	movs	r3, #3
 8000686:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000688:	230b      	movs	r3, #11
 800068a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800068c:	f107 031c 	add.w	r3, r7, #28
 8000690:	4619      	mov	r1, r3
 8000692:	4844      	ldr	r0, [pc, #272]	@ (80007a4 <MX_GPIO_Init+0x23c>)
 8000694:	f000 fab6 	bl	8000c04 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000698:	f244 0381 	movw	r3, #16513	@ 0x4081
 800069c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800069e:	2301      	movs	r3, #1
 80006a0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006a2:	2300      	movs	r3, #0
 80006a4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006a6:	2300      	movs	r3, #0
 80006a8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006aa:	f107 031c 	add.w	r3, r7, #28
 80006ae:	4619      	mov	r1, r3
 80006b0:	4839      	ldr	r0, [pc, #228]	@ (8000798 <MX_GPIO_Init+0x230>)
 80006b2:	f000 faa7 	bl	8000c04 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80006b6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80006ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006bc:	2302      	movs	r3, #2
 80006be:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c0:	2300      	movs	r3, #0
 80006c2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006c4:	2303      	movs	r3, #3
 80006c6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80006c8:	230b      	movs	r3, #11
 80006ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80006cc:	f107 031c 	add.w	r3, r7, #28
 80006d0:	4619      	mov	r1, r3
 80006d2:	4831      	ldr	r0, [pc, #196]	@ (8000798 <MX_GPIO_Init+0x230>)
 80006d4:	f000 fa96 	bl	8000c04 <HAL_GPIO_Init>

  /*Configure GPIO pins : STLK_RX_Pin STLK_TX_Pin */
  GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80006d8:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80006dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006de:	2302      	movs	r3, #2
 80006e0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006e2:	2300      	movs	r3, #0
 80006e4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006e6:	2303      	movs	r3, #3
 80006e8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80006ea:	2307      	movs	r3, #7
 80006ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80006ee:	f107 031c 	add.w	r3, r7, #28
 80006f2:	4619      	mov	r1, r3
 80006f4:	482c      	ldr	r0, [pc, #176]	@ (80007a8 <MX_GPIO_Init+0x240>)
 80006f6:	f000 fa85 	bl	8000c04 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80006fa:	2340      	movs	r3, #64	@ 0x40
 80006fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006fe:	2301      	movs	r3, #1
 8000700:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000702:	2300      	movs	r3, #0
 8000704:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000706:	2300      	movs	r3, #0
 8000708:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800070a:	f107 031c 	add.w	r3, r7, #28
 800070e:	4619      	mov	r1, r3
 8000710:	4822      	ldr	r0, [pc, #136]	@ (800079c <MX_GPIO_Init+0x234>)
 8000712:	f000 fa77 	bl	8000c04 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000716:	2380      	movs	r3, #128	@ 0x80
 8000718:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800071a:	2300      	movs	r3, #0
 800071c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800071e:	2300      	movs	r3, #0
 8000720:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000722:	f107 031c 	add.w	r3, r7, #28
 8000726:	4619      	mov	r1, r3
 8000728:	481c      	ldr	r0, [pc, #112]	@ (800079c <MX_GPIO_Init+0x234>)
 800072a:	f000 fa6b 	bl	8000c04 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800072e:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8000732:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000734:	2302      	movs	r3, #2
 8000736:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000738:	2300      	movs	r3, #0
 800073a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800073c:	2303      	movs	r3, #3
 800073e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000740:	230a      	movs	r3, #10
 8000742:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000744:	f107 031c 	add.w	r3, r7, #28
 8000748:	4619      	mov	r1, r3
 800074a:	4816      	ldr	r0, [pc, #88]	@ (80007a4 <MX_GPIO_Init+0x23c>)
 800074c:	f000 fa5a 	bl	8000c04 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000750:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000754:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000756:	2300      	movs	r3, #0
 8000758:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800075a:	2300      	movs	r3, #0
 800075c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800075e:	f107 031c 	add.w	r3, r7, #28
 8000762:	4619      	mov	r1, r3
 8000764:	480f      	ldr	r0, [pc, #60]	@ (80007a4 <MX_GPIO_Init+0x23c>)
 8000766:	f000 fa4d 	bl	8000c04 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800076a:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 800076e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000770:	2302      	movs	r3, #2
 8000772:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000774:	2300      	movs	r3, #0
 8000776:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000778:	2303      	movs	r3, #3
 800077a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800077c:	230b      	movs	r3, #11
 800077e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000780:	f107 031c 	add.w	r3, r7, #28
 8000784:	4619      	mov	r1, r3
 8000786:	4805      	ldr	r0, [pc, #20]	@ (800079c <MX_GPIO_Init+0x234>)
 8000788:	f000 fa3c 	bl	8000c04 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800078c:	bf00      	nop
 800078e:	3730      	adds	r7, #48	@ 0x30
 8000790:	46bd      	mov	sp, r7
 8000792:	bd80      	pop	{r7, pc}
 8000794:	40023800 	.word	0x40023800
 8000798:	40020400 	.word	0x40020400
 800079c:	40021800 	.word	0x40021800
 80007a0:	40020800 	.word	0x40020800
 80007a4:	40020000 	.word	0x40020000
 80007a8:	40020c00 	.word	0x40020c00

080007ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007ac:	b480      	push	{r7}
 80007ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007b0:	b672      	cpsid	i
}
 80007b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007b4:	bf00      	nop
 80007b6:	e7fd      	b.n	80007b4 <Error_Handler+0x8>

080007b8 <Bytes2float>:
    }

}

float Bytes2float(uint8_t * ftoa_bytes_temp)
{
 80007b8:	b480      	push	{r7}
 80007ba:	b087      	sub	sp, #28
 80007bc:	af00      	add	r7, sp, #0
 80007be:	6078      	str	r0, [r7, #4]
    union {
      float a;
      uint8_t bytes[4];
    } thing;

    for (uint8_t i = 0; i < 4; i++) {
 80007c0:	2300      	movs	r3, #0
 80007c2:	75fb      	strb	r3, [r7, #23]
 80007c4:	e00b      	b.n	80007de <Bytes2float+0x26>
    	thing.bytes[i] = ftoa_bytes_temp[i];
 80007c6:	7dfb      	ldrb	r3, [r7, #23]
 80007c8:	687a      	ldr	r2, [r7, #4]
 80007ca:	441a      	add	r2, r3
 80007cc:	7dfb      	ldrb	r3, [r7, #23]
 80007ce:	7812      	ldrb	r2, [r2, #0]
 80007d0:	3318      	adds	r3, #24
 80007d2:	443b      	add	r3, r7
 80007d4:	f803 2c0c 	strb.w	r2, [r3, #-12]
    for (uint8_t i = 0; i < 4; i++) {
 80007d8:	7dfb      	ldrb	r3, [r7, #23]
 80007da:	3301      	adds	r3, #1
 80007dc:	75fb      	strb	r3, [r7, #23]
 80007de:	7dfb      	ldrb	r3, [r7, #23]
 80007e0:	2b03      	cmp	r3, #3
 80007e2:	d9f0      	bls.n	80007c6 <Bytes2float+0xe>
    }

   float float_variable =  thing.a;
 80007e4:	68fb      	ldr	r3, [r7, #12]
 80007e6:	613b      	str	r3, [r7, #16]
   return float_variable;
 80007e8:	693b      	ldr	r3, [r7, #16]
}
 80007ea:	4618      	mov	r0, r3
 80007ec:	371c      	adds	r7, #28
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bc80      	pop	{r7}
 80007f2:	4770      	bx	lr

080007f4 <Flash_Read_Data>:
	   return 0;
}


void Flash_Read_Data (uint32_t StartSectorAddress, uint32_t *RxBuf, uint16_t numberofwords)
{
 80007f4:	b480      	push	{r7}
 80007f6:	b085      	sub	sp, #20
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	60f8      	str	r0, [r7, #12]
 80007fc:	60b9      	str	r1, [r7, #8]
 80007fe:	4613      	mov	r3, r2
 8000800:	80fb      	strh	r3, [r7, #6]
	while (1)
	{

		*RxBuf = *(__IO uint32_t *)StartSectorAddress;
 8000802:	68fb      	ldr	r3, [r7, #12]
 8000804:	681a      	ldr	r2, [r3, #0]
 8000806:	68bb      	ldr	r3, [r7, #8]
 8000808:	601a      	str	r2, [r3, #0]
		StartSectorAddress += 4;
 800080a:	68fb      	ldr	r3, [r7, #12]
 800080c:	3304      	adds	r3, #4
 800080e:	60fb      	str	r3, [r7, #12]
		RxBuf++;
 8000810:	68bb      	ldr	r3, [r7, #8]
 8000812:	3304      	adds	r3, #4
 8000814:	60bb      	str	r3, [r7, #8]
		if (!(numberofwords--)) break;
 8000816:	88fb      	ldrh	r3, [r7, #6]
 8000818:	1e5a      	subs	r2, r3, #1
 800081a:	80fa      	strh	r2, [r7, #6]
 800081c:	2b00      	cmp	r3, #0
 800081e:	d000      	beq.n	8000822 <Flash_Read_Data+0x2e>
		*RxBuf = *(__IO uint32_t *)StartSectorAddress;
 8000820:	e7ef      	b.n	8000802 <Flash_Read_Data+0xe>
		if (!(numberofwords--)) break;
 8000822:	bf00      	nop
	}
}
 8000824:	bf00      	nop
 8000826:	3714      	adds	r7, #20
 8000828:	46bd      	mov	sp, r7
 800082a:	bc80      	pop	{r7}
 800082c:	4770      	bx	lr

0800082e <Flash_Read_NUM>:
	Flash_Write_Data (StartSectorAddress, (uint32_t *)bytes_temp, 1);
}


float Flash_Read_NUM (uint32_t StartSectorAddress)
{
 800082e:	b580      	push	{r7, lr}
 8000830:	b084      	sub	sp, #16
 8000832:	af00      	add	r7, sp, #0
 8000834:	6078      	str	r0, [r7, #4]
	uint8_t buffer[4];
	float value;

	Flash_Read_Data(StartSectorAddress, (uint32_t *)buffer, 1);
 8000836:	f107 0308 	add.w	r3, r7, #8
 800083a:	2201      	movs	r2, #1
 800083c:	4619      	mov	r1, r3
 800083e:	6878      	ldr	r0, [r7, #4]
 8000840:	f7ff ffd8 	bl	80007f4 <Flash_Read_Data>
	value = Bytes2float(buffer);
 8000844:	f107 0308 	add.w	r3, r7, #8
 8000848:	4618      	mov	r0, r3
 800084a:	f7ff ffb5 	bl	80007b8 <Bytes2float>
 800084e:	60f8      	str	r0, [r7, #12]
	return value;
 8000850:	68fb      	ldr	r3, [r7, #12]
}
 8000852:	4618      	mov	r0, r3
 8000854:	3710      	adds	r7, #16
 8000856:	46bd      	mov	sp, r7
 8000858:	bd80      	pop	{r7, pc}
	...

0800085c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800085c:	b480      	push	{r7}
 800085e:	b083      	sub	sp, #12
 8000860:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000862:	2300      	movs	r3, #0
 8000864:	607b      	str	r3, [r7, #4]
 8000866:	4b0f      	ldr	r3, [pc, #60]	@ (80008a4 <HAL_MspInit+0x48>)
 8000868:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800086a:	4a0e      	ldr	r2, [pc, #56]	@ (80008a4 <HAL_MspInit+0x48>)
 800086c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000870:	6453      	str	r3, [r2, #68]	@ 0x44
 8000872:	4b0c      	ldr	r3, [pc, #48]	@ (80008a4 <HAL_MspInit+0x48>)
 8000874:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000876:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800087a:	607b      	str	r3, [r7, #4]
 800087c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800087e:	2300      	movs	r3, #0
 8000880:	603b      	str	r3, [r7, #0]
 8000882:	4b08      	ldr	r3, [pc, #32]	@ (80008a4 <HAL_MspInit+0x48>)
 8000884:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000886:	4a07      	ldr	r2, [pc, #28]	@ (80008a4 <HAL_MspInit+0x48>)
 8000888:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800088c:	6413      	str	r3, [r2, #64]	@ 0x40
 800088e:	4b05      	ldr	r3, [pc, #20]	@ (80008a4 <HAL_MspInit+0x48>)
 8000890:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000892:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000896:	603b      	str	r3, [r7, #0]
 8000898:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800089a:	bf00      	nop
 800089c:	370c      	adds	r7, #12
 800089e:	46bd      	mov	sp, r7
 80008a0:	bc80      	pop	{r7}
 80008a2:	4770      	bx	lr
 80008a4:	40023800 	.word	0x40023800

080008a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008a8:	b480      	push	{r7}
 80008aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80008ac:	bf00      	nop
 80008ae:	e7fd      	b.n	80008ac <NMI_Handler+0x4>

080008b0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008b0:	b480      	push	{r7}
 80008b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008b4:	bf00      	nop
 80008b6:	e7fd      	b.n	80008b4 <HardFault_Handler+0x4>

080008b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008b8:	b480      	push	{r7}
 80008ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008bc:	bf00      	nop
 80008be:	e7fd      	b.n	80008bc <MemManage_Handler+0x4>

080008c0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008c0:	b480      	push	{r7}
 80008c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008c4:	bf00      	nop
 80008c6:	e7fd      	b.n	80008c4 <BusFault_Handler+0x4>

080008c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008c8:	b480      	push	{r7}
 80008ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008cc:	bf00      	nop
 80008ce:	e7fd      	b.n	80008cc <UsageFault_Handler+0x4>

080008d0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008d0:	b480      	push	{r7}
 80008d2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008d4:	bf00      	nop
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bc80      	pop	{r7}
 80008da:	4770      	bx	lr

080008dc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008dc:	b480      	push	{r7}
 80008de:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008e0:	bf00      	nop
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bc80      	pop	{r7}
 80008e6:	4770      	bx	lr

080008e8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008e8:	b480      	push	{r7}
 80008ea:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008ec:	bf00      	nop
 80008ee:	46bd      	mov	sp, r7
 80008f0:	bc80      	pop	{r7}
 80008f2:	4770      	bx	lr

080008f4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008f8:	f000 f884 	bl	8000a04 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008fc:	bf00      	nop
 80008fe:	bd80      	pop	{r7, pc}

08000900 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000900:	b480      	push	{r7}
 8000902:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000904:	bf00      	nop
 8000906:	46bd      	mov	sp, r7
 8000908:	bc80      	pop	{r7}
 800090a:	4770      	bx	lr

0800090c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800090c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000944 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit 
 8000910:	f7ff fff6 	bl	8000900 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000914:	480c      	ldr	r0, [pc, #48]	@ (8000948 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000916:	490d      	ldr	r1, [pc, #52]	@ (800094c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000918:	4a0d      	ldr	r2, [pc, #52]	@ (8000950 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800091a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800091c:	e002      	b.n	8000924 <LoopCopyDataInit>

0800091e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800091e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000920:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000922:	3304      	adds	r3, #4

08000924 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000924:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000926:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000928:	d3f9      	bcc.n	800091e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800092a:	4a0a      	ldr	r2, [pc, #40]	@ (8000954 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800092c:	4c0a      	ldr	r4, [pc, #40]	@ (8000958 <LoopFillZerobss+0x22>)
  movs r3, #0
 800092e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000930:	e001      	b.n	8000936 <LoopFillZerobss>

08000932 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000932:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000934:	3204      	adds	r2, #4

08000936 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000936:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000938:	d3fb      	bcc.n	8000932 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800093a:	f000 ff6d 	bl	8001818 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800093e:	f7ff fdb7 	bl	80004b0 <main>
  bx  lr
 8000942:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000944:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000948:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800094c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000950:	08001898 	.word	0x08001898
  ldr r2, =_sbss
 8000954:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000958:	20000030 	.word	0x20000030

0800095c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800095c:	e7fe      	b.n	800095c <ADC_IRQHandler>
	...

08000960 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000964:	4b0e      	ldr	r3, [pc, #56]	@ (80009a0 <HAL_Init+0x40>)
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	4a0d      	ldr	r2, [pc, #52]	@ (80009a0 <HAL_Init+0x40>)
 800096a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800096e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
   __HAL_FLASH_DATA_CACHE_ENABLE();
 8000970:	4b0b      	ldr	r3, [pc, #44]	@ (80009a0 <HAL_Init+0x40>)
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	4a0a      	ldr	r2, [pc, #40]	@ (80009a0 <HAL_Init+0x40>)
 8000976:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800097a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800097c:	4b08      	ldr	r3, [pc, #32]	@ (80009a0 <HAL_Init+0x40>)
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	4a07      	ldr	r2, [pc, #28]	@ (80009a0 <HAL_Init+0x40>)
 8000982:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000986:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000988:	2003      	movs	r0, #3
 800098a:	f000 f907 	bl	8000b9c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800098e:	2000      	movs	r0, #0
 8000990:	f000 f808 	bl	80009a4 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8000994:	f7ff ff62 	bl	800085c <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8000998:	2300      	movs	r3, #0
}
 800099a:	4618      	mov	r0, r3
 800099c:	bd80      	pop	{r7, pc}
 800099e:	bf00      	nop
 80009a0:	40023c00 	.word	0x40023c00

080009a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param  TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b082      	sub	sp, #8
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80009ac:	4b12      	ldr	r3, [pc, #72]	@ (80009f8 <HAL_InitTick+0x54>)
 80009ae:	681a      	ldr	r2, [r3, #0]
 80009b0:	4b12      	ldr	r3, [pc, #72]	@ (80009fc <HAL_InitTick+0x58>)
 80009b2:	781b      	ldrb	r3, [r3, #0]
 80009b4:	4619      	mov	r1, r3
 80009b6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80009ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80009be:	fbb2 f3f3 	udiv	r3, r2, r3
 80009c2:	4618      	mov	r0, r3
 80009c4:	f000 f911 	bl	8000bea <HAL_SYSTICK_Config>
 80009c8:	4603      	mov	r3, r0
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d001      	beq.n	80009d2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80009ce:	2301      	movs	r3, #1
 80009d0:	e00e      	b.n	80009f0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	2b0f      	cmp	r3, #15
 80009d6:	d80a      	bhi.n	80009ee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009d8:	2200      	movs	r2, #0
 80009da:	6879      	ldr	r1, [r7, #4]
 80009dc:	f04f 30ff 	mov.w	r0, #4294967295
 80009e0:	f000 f8e7 	bl	8000bb2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80009e4:	4a06      	ldr	r2, [pc, #24]	@ (8000a00 <HAL_InitTick+0x5c>)
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80009ea:	2300      	movs	r3, #0
 80009ec:	e000      	b.n	80009f0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80009ee:	2301      	movs	r3, #1
}
 80009f0:	4618      	mov	r0, r3
 80009f2:	3708      	adds	r7, #8
 80009f4:	46bd      	mov	sp, r7
 80009f6:	bd80      	pop	{r7, pc}
 80009f8:	20000000 	.word	0x20000000
 80009fc:	20000008 	.word	0x20000008
 8000a00:	20000004 	.word	0x20000004

08000a04 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a04:	b480      	push	{r7}
 8000a06:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a08:	4b05      	ldr	r3, [pc, #20]	@ (8000a20 <HAL_IncTick+0x1c>)
 8000a0a:	781b      	ldrb	r3, [r3, #0]
 8000a0c:	461a      	mov	r2, r3
 8000a0e:	4b05      	ldr	r3, [pc, #20]	@ (8000a24 <HAL_IncTick+0x20>)
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	4413      	add	r3, r2
 8000a14:	4a03      	ldr	r2, [pc, #12]	@ (8000a24 <HAL_IncTick+0x20>)
 8000a16:	6013      	str	r3, [r2, #0]
}
 8000a18:	bf00      	nop
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bc80      	pop	{r7}
 8000a1e:	4770      	bx	lr
 8000a20:	20000008 	.word	0x20000008
 8000a24:	2000002c 	.word	0x2000002c

08000a28 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	af00      	add	r7, sp, #0
  return uwTick;
 8000a2c:	4b02      	ldr	r3, [pc, #8]	@ (8000a38 <HAL_GetTick+0x10>)
 8000a2e:	681b      	ldr	r3, [r3, #0]
}
 8000a30:	4618      	mov	r0, r3
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bc80      	pop	{r7}
 8000a36:	4770      	bx	lr
 8000a38:	2000002c 	.word	0x2000002c

08000a3c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	b085      	sub	sp, #20
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	f003 0307 	and.w	r3, r3, #7
 8000a4a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a4c:	4b0c      	ldr	r3, [pc, #48]	@ (8000a80 <__NVIC_SetPriorityGrouping+0x44>)
 8000a4e:	68db      	ldr	r3, [r3, #12]
 8000a50:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a52:	68ba      	ldr	r2, [r7, #8]
 8000a54:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000a58:	4013      	ands	r3, r2
 8000a5a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000a5c:	68fb      	ldr	r3, [r7, #12]
 8000a5e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a60:	68bb      	ldr	r3, [r7, #8]
 8000a62:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a64:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000a68:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a6c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a6e:	4a04      	ldr	r2, [pc, #16]	@ (8000a80 <__NVIC_SetPriorityGrouping+0x44>)
 8000a70:	68bb      	ldr	r3, [r7, #8]
 8000a72:	60d3      	str	r3, [r2, #12]
}
 8000a74:	bf00      	nop
 8000a76:	3714      	adds	r7, #20
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	bc80      	pop	{r7}
 8000a7c:	4770      	bx	lr
 8000a7e:	bf00      	nop
 8000a80:	e000ed00 	.word	0xe000ed00

08000a84 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a84:	b480      	push	{r7}
 8000a86:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a88:	4b04      	ldr	r3, [pc, #16]	@ (8000a9c <__NVIC_GetPriorityGrouping+0x18>)
 8000a8a:	68db      	ldr	r3, [r3, #12]
 8000a8c:	0a1b      	lsrs	r3, r3, #8
 8000a8e:	f003 0307 	and.w	r3, r3, #7
}
 8000a92:	4618      	mov	r0, r3
 8000a94:	46bd      	mov	sp, r7
 8000a96:	bc80      	pop	{r7}
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop
 8000a9c:	e000ed00 	.word	0xe000ed00

08000aa0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	b083      	sub	sp, #12
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	6039      	str	r1, [r7, #0]
 8000aaa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000aac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	db0a      	blt.n	8000aca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ab4:	683b      	ldr	r3, [r7, #0]
 8000ab6:	b2da      	uxtb	r2, r3
 8000ab8:	490c      	ldr	r1, [pc, #48]	@ (8000aec <__NVIC_SetPriority+0x4c>)
 8000aba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000abe:	0112      	lsls	r2, r2, #4
 8000ac0:	b2d2      	uxtb	r2, r2
 8000ac2:	440b      	add	r3, r1
 8000ac4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ac8:	e00a      	b.n	8000ae0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000aca:	683b      	ldr	r3, [r7, #0]
 8000acc:	b2da      	uxtb	r2, r3
 8000ace:	4908      	ldr	r1, [pc, #32]	@ (8000af0 <__NVIC_SetPriority+0x50>)
 8000ad0:	79fb      	ldrb	r3, [r7, #7]
 8000ad2:	f003 030f 	and.w	r3, r3, #15
 8000ad6:	3b04      	subs	r3, #4
 8000ad8:	0112      	lsls	r2, r2, #4
 8000ada:	b2d2      	uxtb	r2, r2
 8000adc:	440b      	add	r3, r1
 8000ade:	761a      	strb	r2, [r3, #24]
}
 8000ae0:	bf00      	nop
 8000ae2:	370c      	adds	r7, #12
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	bc80      	pop	{r7}
 8000ae8:	4770      	bx	lr
 8000aea:	bf00      	nop
 8000aec:	e000e100 	.word	0xe000e100
 8000af0:	e000ed00 	.word	0xe000ed00

08000af4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000af4:	b480      	push	{r7}
 8000af6:	b089      	sub	sp, #36	@ 0x24
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	60f8      	str	r0, [r7, #12]
 8000afc:	60b9      	str	r1, [r7, #8]
 8000afe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b00:	68fb      	ldr	r3, [r7, #12]
 8000b02:	f003 0307 	and.w	r3, r3, #7
 8000b06:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b08:	69fb      	ldr	r3, [r7, #28]
 8000b0a:	f1c3 0307 	rsb	r3, r3, #7
 8000b0e:	2b04      	cmp	r3, #4
 8000b10:	bf28      	it	cs
 8000b12:	2304      	movcs	r3, #4
 8000b14:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b16:	69fb      	ldr	r3, [r7, #28]
 8000b18:	3304      	adds	r3, #4
 8000b1a:	2b06      	cmp	r3, #6
 8000b1c:	d902      	bls.n	8000b24 <NVIC_EncodePriority+0x30>
 8000b1e:	69fb      	ldr	r3, [r7, #28]
 8000b20:	3b03      	subs	r3, #3
 8000b22:	e000      	b.n	8000b26 <NVIC_EncodePriority+0x32>
 8000b24:	2300      	movs	r3, #0
 8000b26:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b28:	f04f 32ff 	mov.w	r2, #4294967295
 8000b2c:	69bb      	ldr	r3, [r7, #24]
 8000b2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b32:	43da      	mvns	r2, r3
 8000b34:	68bb      	ldr	r3, [r7, #8]
 8000b36:	401a      	ands	r2, r3
 8000b38:	697b      	ldr	r3, [r7, #20]
 8000b3a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b3c:	f04f 31ff 	mov.w	r1, #4294967295
 8000b40:	697b      	ldr	r3, [r7, #20]
 8000b42:	fa01 f303 	lsl.w	r3, r1, r3
 8000b46:	43d9      	mvns	r1, r3
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b4c:	4313      	orrs	r3, r2
         );
}
 8000b4e:	4618      	mov	r0, r3
 8000b50:	3724      	adds	r7, #36	@ 0x24
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bc80      	pop	{r7}
 8000b56:	4770      	bx	lr

08000b58 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b082      	sub	sp, #8
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	3b01      	subs	r3, #1
 8000b64:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000b68:	d301      	bcc.n	8000b6e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b6a:	2301      	movs	r3, #1
 8000b6c:	e00f      	b.n	8000b8e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b6e:	4a0a      	ldr	r2, [pc, #40]	@ (8000b98 <SysTick_Config+0x40>)
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	3b01      	subs	r3, #1
 8000b74:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b76:	210f      	movs	r1, #15
 8000b78:	f04f 30ff 	mov.w	r0, #4294967295
 8000b7c:	f7ff ff90 	bl	8000aa0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b80:	4b05      	ldr	r3, [pc, #20]	@ (8000b98 <SysTick_Config+0x40>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b86:	4b04      	ldr	r3, [pc, #16]	@ (8000b98 <SysTick_Config+0x40>)
 8000b88:	2207      	movs	r2, #7
 8000b8a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b8c:	2300      	movs	r3, #0
}
 8000b8e:	4618      	mov	r0, r3
 8000b90:	3708      	adds	r7, #8
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bd80      	pop	{r7, pc}
 8000b96:	bf00      	nop
 8000b98:	e000e010 	.word	0xe000e010

08000b9c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b082      	sub	sp, #8
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ba4:	6878      	ldr	r0, [r7, #4]
 8000ba6:	f7ff ff49 	bl	8000a3c <__NVIC_SetPriorityGrouping>
}
 8000baa:	bf00      	nop
 8000bac:	3708      	adds	r7, #8
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bd80      	pop	{r7, pc}

08000bb2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000bb2:	b580      	push	{r7, lr}
 8000bb4:	b086      	sub	sp, #24
 8000bb6:	af00      	add	r7, sp, #0
 8000bb8:	4603      	mov	r3, r0
 8000bba:	60b9      	str	r1, [r7, #8]
 8000bbc:	607a      	str	r2, [r7, #4]
 8000bbe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000bc4:	f7ff ff5e 	bl	8000a84 <__NVIC_GetPriorityGrouping>
 8000bc8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000bca:	687a      	ldr	r2, [r7, #4]
 8000bcc:	68b9      	ldr	r1, [r7, #8]
 8000bce:	6978      	ldr	r0, [r7, #20]
 8000bd0:	f7ff ff90 	bl	8000af4 <NVIC_EncodePriority>
 8000bd4:	4602      	mov	r2, r0
 8000bd6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000bda:	4611      	mov	r1, r2
 8000bdc:	4618      	mov	r0, r3
 8000bde:	f7ff ff5f 	bl	8000aa0 <__NVIC_SetPriority>
}
 8000be2:	bf00      	nop
 8000be4:	3718      	adds	r7, #24
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bd80      	pop	{r7, pc}

08000bea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000bea:	b580      	push	{r7, lr}
 8000bec:	b082      	sub	sp, #8
 8000bee:	af00      	add	r7, sp, #0
 8000bf0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000bf2:	6878      	ldr	r0, [r7, #4]
 8000bf4:	f7ff ffb0 	bl	8000b58 <SysTick_Config>
 8000bf8:	4603      	mov	r3, r0
}
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	3708      	adds	r7, #8
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bd80      	pop	{r7, pc}
	...

08000c04 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c04:	b480      	push	{r7}
 8000c06:	b087      	sub	sp, #28
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
 8000c0c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c12:	e16f      	b.n	8000ef4 <HAL_GPIO_Init+0x2f0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000c14:	683b      	ldr	r3, [r7, #0]
 8000c16:	681a      	ldr	r2, [r3, #0]
 8000c18:	2101      	movs	r1, #1
 8000c1a:	697b      	ldr	r3, [r7, #20]
 8000c1c:	fa01 f303 	lsl.w	r3, r1, r3
 8000c20:	4013      	ands	r3, r2
 8000c22:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000c24:	68fb      	ldr	r3, [r7, #12]
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	f000 8161 	beq.w	8000eee <HAL_GPIO_Init+0x2ea>
    {
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000c2c:	683b      	ldr	r3, [r7, #0]
 8000c2e:	685b      	ldr	r3, [r3, #4]
 8000c30:	f003 0303 	and.w	r3, r3, #3
 8000c34:	2b01      	cmp	r3, #1
 8000c36:	d005      	beq.n	8000c44 <HAL_GPIO_Init+0x40>
 8000c38:	683b      	ldr	r3, [r7, #0]
 8000c3a:	685b      	ldr	r3, [r3, #4]
 8000c3c:	f003 0303 	and.w	r3, r3, #3
 8000c40:	2b02      	cmp	r3, #2
 8000c42:	d130      	bne.n	8000ca6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	689b      	ldr	r3, [r3, #8]
 8000c48:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000c4a:	697b      	ldr	r3, [r7, #20]
 8000c4c:	005b      	lsls	r3, r3, #1
 8000c4e:	2203      	movs	r2, #3
 8000c50:	fa02 f303 	lsl.w	r3, r2, r3
 8000c54:	43db      	mvns	r3, r3
 8000c56:	693a      	ldr	r2, [r7, #16]
 8000c58:	4013      	ands	r3, r2
 8000c5a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000c5c:	683b      	ldr	r3, [r7, #0]
 8000c5e:	68da      	ldr	r2, [r3, #12]
 8000c60:	697b      	ldr	r3, [r7, #20]
 8000c62:	005b      	lsls	r3, r3, #1
 8000c64:	fa02 f303 	lsl.w	r3, r2, r3
 8000c68:	693a      	ldr	r2, [r7, #16]
 8000c6a:	4313      	orrs	r3, r2
 8000c6c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	693a      	ldr	r2, [r7, #16]
 8000c72:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	685b      	ldr	r3, [r3, #4]
 8000c78:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000c7a:	2201      	movs	r2, #1
 8000c7c:	697b      	ldr	r3, [r7, #20]
 8000c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c82:	43db      	mvns	r3, r3
 8000c84:	693a      	ldr	r2, [r7, #16]
 8000c86:	4013      	ands	r3, r2
 8000c88:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000c8a:	683b      	ldr	r3, [r7, #0]
 8000c8c:	685b      	ldr	r3, [r3, #4]
 8000c8e:	091b      	lsrs	r3, r3, #4
 8000c90:	f003 0201 	and.w	r2, r3, #1
 8000c94:	697b      	ldr	r3, [r7, #20]
 8000c96:	fa02 f303 	lsl.w	r3, r2, r3
 8000c9a:	693a      	ldr	r2, [r7, #16]
 8000c9c:	4313      	orrs	r3, r2
 8000c9e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	693a      	ldr	r2, [r7, #16]
 8000ca4:	605a      	str	r2, [r3, #4]
      }
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ca6:	683b      	ldr	r3, [r7, #0]
 8000ca8:	685b      	ldr	r3, [r3, #4]
 8000caa:	f003 0303 	and.w	r3, r3, #3
 8000cae:	2b03      	cmp	r3, #3
 8000cb0:	d017      	beq.n	8000ce2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	68db      	ldr	r3, [r3, #12]
 8000cb6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000cb8:	697b      	ldr	r3, [r7, #20]
 8000cba:	005b      	lsls	r3, r3, #1
 8000cbc:	2203      	movs	r2, #3
 8000cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc2:	43db      	mvns	r3, r3
 8000cc4:	693a      	ldr	r2, [r7, #16]
 8000cc6:	4013      	ands	r3, r2
 8000cc8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000cca:	683b      	ldr	r3, [r7, #0]
 8000ccc:	689a      	ldr	r2, [r3, #8]
 8000cce:	697b      	ldr	r3, [r7, #20]
 8000cd0:	005b      	lsls	r3, r3, #1
 8000cd2:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd6:	693a      	ldr	r2, [r7, #16]
 8000cd8:	4313      	orrs	r3, r2
 8000cda:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	693a      	ldr	r2, [r7, #16]
 8000ce0:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ce2:	683b      	ldr	r3, [r7, #0]
 8000ce4:	685b      	ldr	r3, [r3, #4]
 8000ce6:	f003 0303 	and.w	r3, r3, #3
 8000cea:	2b02      	cmp	r3, #2
 8000cec:	d123      	bne.n	8000d36 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000cee:	697b      	ldr	r3, [r7, #20]
 8000cf0:	08da      	lsrs	r2, r3, #3
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	3208      	adds	r2, #8
 8000cf6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000cfa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000cfc:	697b      	ldr	r3, [r7, #20]
 8000cfe:	f003 0307 	and.w	r3, r3, #7
 8000d02:	009b      	lsls	r3, r3, #2
 8000d04:	220f      	movs	r2, #15
 8000d06:	fa02 f303 	lsl.w	r3, r2, r3
 8000d0a:	43db      	mvns	r3, r3
 8000d0c:	693a      	ldr	r2, [r7, #16]
 8000d0e:	4013      	ands	r3, r2
 8000d10:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000d12:	683b      	ldr	r3, [r7, #0]
 8000d14:	691a      	ldr	r2, [r3, #16]
 8000d16:	697b      	ldr	r3, [r7, #20]
 8000d18:	f003 0307 	and.w	r3, r3, #7
 8000d1c:	009b      	lsls	r3, r3, #2
 8000d1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d22:	693a      	ldr	r2, [r7, #16]
 8000d24:	4313      	orrs	r3, r2
 8000d26:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000d28:	697b      	ldr	r3, [r7, #20]
 8000d2a:	08da      	lsrs	r2, r3, #3
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	3208      	adds	r2, #8
 8000d30:	6939      	ldr	r1, [r7, #16]
 8000d32:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000d3c:	697b      	ldr	r3, [r7, #20]
 8000d3e:	005b      	lsls	r3, r3, #1
 8000d40:	2203      	movs	r2, #3
 8000d42:	fa02 f303 	lsl.w	r3, r2, r3
 8000d46:	43db      	mvns	r3, r3
 8000d48:	693a      	ldr	r2, [r7, #16]
 8000d4a:	4013      	ands	r3, r2
 8000d4c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000d4e:	683b      	ldr	r3, [r7, #0]
 8000d50:	685b      	ldr	r3, [r3, #4]
 8000d52:	f003 0203 	and.w	r2, r3, #3
 8000d56:	697b      	ldr	r3, [r7, #20]
 8000d58:	005b      	lsls	r3, r3, #1
 8000d5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d5e:	693a      	ldr	r2, [r7, #16]
 8000d60:	4313      	orrs	r3, r2
 8000d62:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	693a      	ldr	r2, [r7, #16]
 8000d68:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000d6a:	683b      	ldr	r3, [r7, #0]
 8000d6c:	685b      	ldr	r3, [r3, #4]
 8000d6e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	f000 80bb 	beq.w	8000eee <HAL_GPIO_Init+0x2ea>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d78:	2300      	movs	r3, #0
 8000d7a:	60bb      	str	r3, [r7, #8]
 8000d7c:	4b64      	ldr	r3, [pc, #400]	@ (8000f10 <HAL_GPIO_Init+0x30c>)
 8000d7e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d80:	4a63      	ldr	r2, [pc, #396]	@ (8000f10 <HAL_GPIO_Init+0x30c>)
 8000d82:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d86:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d88:	4b61      	ldr	r3, [pc, #388]	@ (8000f10 <HAL_GPIO_Init+0x30c>)
 8000d8a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d8c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000d90:	60bb      	str	r3, [r7, #8]
 8000d92:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000d94:	4a5f      	ldr	r2, [pc, #380]	@ (8000f14 <HAL_GPIO_Init+0x310>)
 8000d96:	697b      	ldr	r3, [r7, #20]
 8000d98:	089b      	lsrs	r3, r3, #2
 8000d9a:	3302      	adds	r3, #2
 8000d9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000da0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000da2:	697b      	ldr	r3, [r7, #20]
 8000da4:	f003 0303 	and.w	r3, r3, #3
 8000da8:	009b      	lsls	r3, r3, #2
 8000daa:	220f      	movs	r2, #15
 8000dac:	fa02 f303 	lsl.w	r3, r2, r3
 8000db0:	43db      	mvns	r3, r3
 8000db2:	693a      	ldr	r2, [r7, #16]
 8000db4:	4013      	ands	r3, r2
 8000db6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	4a57      	ldr	r2, [pc, #348]	@ (8000f18 <HAL_GPIO_Init+0x314>)
 8000dbc:	4293      	cmp	r3, r2
 8000dbe:	d031      	beq.n	8000e24 <HAL_GPIO_Init+0x220>
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	4a56      	ldr	r2, [pc, #344]	@ (8000f1c <HAL_GPIO_Init+0x318>)
 8000dc4:	4293      	cmp	r3, r2
 8000dc6:	d02b      	beq.n	8000e20 <HAL_GPIO_Init+0x21c>
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	4a55      	ldr	r2, [pc, #340]	@ (8000f20 <HAL_GPIO_Init+0x31c>)
 8000dcc:	4293      	cmp	r3, r2
 8000dce:	d025      	beq.n	8000e1c <HAL_GPIO_Init+0x218>
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	4a54      	ldr	r2, [pc, #336]	@ (8000f24 <HAL_GPIO_Init+0x320>)
 8000dd4:	4293      	cmp	r3, r2
 8000dd6:	d01f      	beq.n	8000e18 <HAL_GPIO_Init+0x214>
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	4a53      	ldr	r2, [pc, #332]	@ (8000f28 <HAL_GPIO_Init+0x324>)
 8000ddc:	4293      	cmp	r3, r2
 8000dde:	d019      	beq.n	8000e14 <HAL_GPIO_Init+0x210>
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	4a52      	ldr	r2, [pc, #328]	@ (8000f2c <HAL_GPIO_Init+0x328>)
 8000de4:	4293      	cmp	r3, r2
 8000de6:	d013      	beq.n	8000e10 <HAL_GPIO_Init+0x20c>
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	4a51      	ldr	r2, [pc, #324]	@ (8000f30 <HAL_GPIO_Init+0x32c>)
 8000dec:	4293      	cmp	r3, r2
 8000dee:	d00d      	beq.n	8000e0c <HAL_GPIO_Init+0x208>
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	4a50      	ldr	r2, [pc, #320]	@ (8000f34 <HAL_GPIO_Init+0x330>)
 8000df4:	4293      	cmp	r3, r2
 8000df6:	d007      	beq.n	8000e08 <HAL_GPIO_Init+0x204>
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	4a4f      	ldr	r2, [pc, #316]	@ (8000f38 <HAL_GPIO_Init+0x334>)
 8000dfc:	4293      	cmp	r3, r2
 8000dfe:	d101      	bne.n	8000e04 <HAL_GPIO_Init+0x200>
 8000e00:	2308      	movs	r3, #8
 8000e02:	e010      	b.n	8000e26 <HAL_GPIO_Init+0x222>
 8000e04:	2309      	movs	r3, #9
 8000e06:	e00e      	b.n	8000e26 <HAL_GPIO_Init+0x222>
 8000e08:	2307      	movs	r3, #7
 8000e0a:	e00c      	b.n	8000e26 <HAL_GPIO_Init+0x222>
 8000e0c:	2306      	movs	r3, #6
 8000e0e:	e00a      	b.n	8000e26 <HAL_GPIO_Init+0x222>
 8000e10:	2305      	movs	r3, #5
 8000e12:	e008      	b.n	8000e26 <HAL_GPIO_Init+0x222>
 8000e14:	2304      	movs	r3, #4
 8000e16:	e006      	b.n	8000e26 <HAL_GPIO_Init+0x222>
 8000e18:	2303      	movs	r3, #3
 8000e1a:	e004      	b.n	8000e26 <HAL_GPIO_Init+0x222>
 8000e1c:	2302      	movs	r3, #2
 8000e1e:	e002      	b.n	8000e26 <HAL_GPIO_Init+0x222>
 8000e20:	2301      	movs	r3, #1
 8000e22:	e000      	b.n	8000e26 <HAL_GPIO_Init+0x222>
 8000e24:	2300      	movs	r3, #0
 8000e26:	697a      	ldr	r2, [r7, #20]
 8000e28:	f002 0203 	and.w	r2, r2, #3
 8000e2c:	0092      	lsls	r2, r2, #2
 8000e2e:	4093      	lsls	r3, r2
 8000e30:	461a      	mov	r2, r3
 8000e32:	693b      	ldr	r3, [r7, #16]
 8000e34:	4313      	orrs	r3, r2
 8000e36:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000e38:	4936      	ldr	r1, [pc, #216]	@ (8000f14 <HAL_GPIO_Init+0x310>)
 8000e3a:	697b      	ldr	r3, [r7, #20]
 8000e3c:	089b      	lsrs	r3, r3, #2
 8000e3e:	3302      	adds	r3, #2
 8000e40:	693a      	ldr	r2, [r7, #16]
 8000e42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000e46:	4b3d      	ldr	r3, [pc, #244]	@ (8000f3c <HAL_GPIO_Init+0x338>)
 8000e48:	689b      	ldr	r3, [r3, #8]
 8000e4a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e4c:	68fb      	ldr	r3, [r7, #12]
 8000e4e:	43db      	mvns	r3, r3
 8000e50:	693a      	ldr	r2, [r7, #16]
 8000e52:	4013      	ands	r3, r2
 8000e54:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000e56:	683b      	ldr	r3, [r7, #0]
 8000e58:	685b      	ldr	r3, [r3, #4]
 8000e5a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d003      	beq.n	8000e6a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8000e62:	693a      	ldr	r2, [r7, #16]
 8000e64:	68fb      	ldr	r3, [r7, #12]
 8000e66:	4313      	orrs	r3, r2
 8000e68:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000e6a:	4a34      	ldr	r2, [pc, #208]	@ (8000f3c <HAL_GPIO_Init+0x338>)
 8000e6c:	693b      	ldr	r3, [r7, #16]
 8000e6e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000e70:	4b32      	ldr	r3, [pc, #200]	@ (8000f3c <HAL_GPIO_Init+0x338>)
 8000e72:	68db      	ldr	r3, [r3, #12]
 8000e74:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e76:	68fb      	ldr	r3, [r7, #12]
 8000e78:	43db      	mvns	r3, r3
 8000e7a:	693a      	ldr	r2, [r7, #16]
 8000e7c:	4013      	ands	r3, r2
 8000e7e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000e80:	683b      	ldr	r3, [r7, #0]
 8000e82:	685b      	ldr	r3, [r3, #4]
 8000e84:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d003      	beq.n	8000e94 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8000e8c:	693a      	ldr	r2, [r7, #16]
 8000e8e:	68fb      	ldr	r3, [r7, #12]
 8000e90:	4313      	orrs	r3, r2
 8000e92:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000e94:	4a29      	ldr	r2, [pc, #164]	@ (8000f3c <HAL_GPIO_Init+0x338>)
 8000e96:	693b      	ldr	r3, [r7, #16]
 8000e98:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000e9a:	4b28      	ldr	r3, [pc, #160]	@ (8000f3c <HAL_GPIO_Init+0x338>)
 8000e9c:	685b      	ldr	r3, [r3, #4]
 8000e9e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ea0:	68fb      	ldr	r3, [r7, #12]
 8000ea2:	43db      	mvns	r3, r3
 8000ea4:	693a      	ldr	r2, [r7, #16]
 8000ea6:	4013      	ands	r3, r2
 8000ea8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000eaa:	683b      	ldr	r3, [r7, #0]
 8000eac:	685b      	ldr	r3, [r3, #4]
 8000eae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d003      	beq.n	8000ebe <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8000eb6:	693a      	ldr	r2, [r7, #16]
 8000eb8:	68fb      	ldr	r3, [r7, #12]
 8000eba:	4313      	orrs	r3, r2
 8000ebc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000ebe:	4a1f      	ldr	r2, [pc, #124]	@ (8000f3c <HAL_GPIO_Init+0x338>)
 8000ec0:	693b      	ldr	r3, [r7, #16]
 8000ec2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000ec4:	4b1d      	ldr	r3, [pc, #116]	@ (8000f3c <HAL_GPIO_Init+0x338>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000eca:	68fb      	ldr	r3, [r7, #12]
 8000ecc:	43db      	mvns	r3, r3
 8000ece:	693a      	ldr	r2, [r7, #16]
 8000ed0:	4013      	ands	r3, r2
 8000ed2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000ed4:	683b      	ldr	r3, [r7, #0]
 8000ed6:	685b      	ldr	r3, [r3, #4]
 8000ed8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d003      	beq.n	8000ee8 <HAL_GPIO_Init+0x2e4>
        {
          temp |= iocurrent;
 8000ee0:	693a      	ldr	r2, [r7, #16]
 8000ee2:	68fb      	ldr	r3, [r7, #12]
 8000ee4:	4313      	orrs	r3, r2
 8000ee6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000ee8:	4a14      	ldr	r2, [pc, #80]	@ (8000f3c <HAL_GPIO_Init+0x338>)
 8000eea:	693b      	ldr	r3, [r7, #16]
 8000eec:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000eee:	697b      	ldr	r3, [r7, #20]
 8000ef0:	3301      	adds	r3, #1
 8000ef2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ef4:	683b      	ldr	r3, [r7, #0]
 8000ef6:	681a      	ldr	r2, [r3, #0]
 8000ef8:	697b      	ldr	r3, [r7, #20]
 8000efa:	fa22 f303 	lsr.w	r3, r2, r3
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	f47f ae88 	bne.w	8000c14 <HAL_GPIO_Init+0x10>
  }
}
 8000f04:	bf00      	nop
 8000f06:	bf00      	nop
 8000f08:	371c      	adds	r7, #28
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bc80      	pop	{r7}
 8000f0e:	4770      	bx	lr
 8000f10:	40023800 	.word	0x40023800
 8000f14:	40013800 	.word	0x40013800
 8000f18:	40020000 	.word	0x40020000
 8000f1c:	40020400 	.word	0x40020400
 8000f20:	40020800 	.word	0x40020800
 8000f24:	40020c00 	.word	0x40020c00
 8000f28:	40021000 	.word	0x40021000
 8000f2c:	40021400 	.word	0x40021400
 8000f30:	40021800 	.word	0x40021800
 8000f34:	40021c00 	.word	0x40021c00
 8000f38:	40022000 	.word	0x40022000
 8000f3c:	40013c00 	.word	0x40013c00

08000f40 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f40:	b480      	push	{r7}
 8000f42:	b083      	sub	sp, #12
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
 8000f48:	460b      	mov	r3, r1
 8000f4a:	807b      	strh	r3, [r7, #2]
 8000f4c:	4613      	mov	r3, r2
 8000f4e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000f50:	787b      	ldrb	r3, [r7, #1]
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d003      	beq.n	8000f5e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000f56:	887a      	ldrh	r2, [r7, #2]
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000f5c:	e003      	b.n	8000f66 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000f5e:	887b      	ldrh	r3, [r7, #2]
 8000f60:	041a      	lsls	r2, r3, #16
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	619a      	str	r2, [r3, #24]
}
 8000f66:	bf00      	nop
 8000f68:	370c      	adds	r7, #12
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bc80      	pop	{r7}
 8000f6e:	4770      	bx	lr

08000f70 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b08a      	sub	sp, #40	@ 0x28
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d101      	bne.n	8000f82 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000f7e:	2301      	movs	r3, #1
 8000f80:	e23b      	b.n	80013fa <HAL_RCC_OscConfig+0x48a>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	f003 0301 	and.w	r3, r3, #1
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d050      	beq.n	8001030 <HAL_RCC_OscConfig+0xc0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000f8e:	4b9e      	ldr	r3, [pc, #632]	@ (8001208 <HAL_RCC_OscConfig+0x298>)
 8000f90:	689b      	ldr	r3, [r3, #8]
 8000f92:	f003 030c 	and.w	r3, r3, #12
 8000f96:	2b04      	cmp	r3, #4
 8000f98:	d00c      	beq.n	8000fb4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000f9a:	4b9b      	ldr	r3, [pc, #620]	@ (8001208 <HAL_RCC_OscConfig+0x298>)
 8000f9c:	689b      	ldr	r3, [r3, #8]
 8000f9e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000fa2:	2b08      	cmp	r3, #8
 8000fa4:	d112      	bne.n	8000fcc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000fa6:	4b98      	ldr	r3, [pc, #608]	@ (8001208 <HAL_RCC_OscConfig+0x298>)
 8000fa8:	685b      	ldr	r3, [r3, #4]
 8000faa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000fae:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8000fb2:	d10b      	bne.n	8000fcc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000fb4:	4b94      	ldr	r3, [pc, #592]	@ (8001208 <HAL_RCC_OscConfig+0x298>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d036      	beq.n	800102e <HAL_RCC_OscConfig+0xbe>
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	685b      	ldr	r3, [r3, #4]
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d132      	bne.n	800102e <HAL_RCC_OscConfig+0xbe>
      {
        return HAL_ERROR;
 8000fc8:	2301      	movs	r3, #1
 8000fca:	e216      	b.n	80013fa <HAL_RCC_OscConfig+0x48a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	685a      	ldr	r2, [r3, #4]
 8000fd0:	4b8e      	ldr	r3, [pc, #568]	@ (800120c <HAL_RCC_OscConfig+0x29c>)
 8000fd2:	b2d2      	uxtb	r2, r2
 8000fd4:	701a      	strb	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	685b      	ldr	r3, [r3, #4]
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d013      	beq.n	8001006 <HAL_RCC_OscConfig+0x96>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fde:	f7ff fd23 	bl	8000a28 <HAL_GetTick>
 8000fe2:	6238      	str	r0, [r7, #32]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000fe4:	e008      	b.n	8000ff8 <HAL_RCC_OscConfig+0x88>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000fe6:	f7ff fd1f 	bl	8000a28 <HAL_GetTick>
 8000fea:	4602      	mov	r2, r0
 8000fec:	6a3b      	ldr	r3, [r7, #32]
 8000fee:	1ad3      	subs	r3, r2, r3
 8000ff0:	2b64      	cmp	r3, #100	@ 0x64
 8000ff2:	d901      	bls.n	8000ff8 <HAL_RCC_OscConfig+0x88>
          {
            return HAL_TIMEOUT;
 8000ff4:	2303      	movs	r3, #3
 8000ff6:	e200      	b.n	80013fa <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ff8:	4b83      	ldr	r3, [pc, #524]	@ (8001208 <HAL_RCC_OscConfig+0x298>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001000:	2b00      	cmp	r3, #0
 8001002:	d0f0      	beq.n	8000fe6 <HAL_RCC_OscConfig+0x76>
 8001004:	e014      	b.n	8001030 <HAL_RCC_OscConfig+0xc0>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001006:	f7ff fd0f 	bl	8000a28 <HAL_GetTick>
 800100a:	6238      	str	r0, [r7, #32]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800100c:	e008      	b.n	8001020 <HAL_RCC_OscConfig+0xb0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800100e:	f7ff fd0b 	bl	8000a28 <HAL_GetTick>
 8001012:	4602      	mov	r2, r0
 8001014:	6a3b      	ldr	r3, [r7, #32]
 8001016:	1ad3      	subs	r3, r2, r3
 8001018:	2b64      	cmp	r3, #100	@ 0x64
 800101a:	d901      	bls.n	8001020 <HAL_RCC_OscConfig+0xb0>
          {
            return HAL_TIMEOUT;
 800101c:	2303      	movs	r3, #3
 800101e:	e1ec      	b.n	80013fa <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001020:	4b79      	ldr	r3, [pc, #484]	@ (8001208 <HAL_RCC_OscConfig+0x298>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001028:	2b00      	cmp	r3, #0
 800102a:	d1f0      	bne.n	800100e <HAL_RCC_OscConfig+0x9e>
 800102c:	e000      	b.n	8001030 <HAL_RCC_OscConfig+0xc0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800102e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	f003 0302 	and.w	r3, r3, #2
 8001038:	2b00      	cmp	r3, #0
 800103a:	d077      	beq.n	800112c <HAL_RCC_OscConfig+0x1bc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800103c:	4b72      	ldr	r3, [pc, #456]	@ (8001208 <HAL_RCC_OscConfig+0x298>)
 800103e:	689b      	ldr	r3, [r3, #8]
 8001040:	f003 030c 	and.w	r3, r3, #12
 8001044:	2b00      	cmp	r3, #0
 8001046:	d00b      	beq.n	8001060 <HAL_RCC_OscConfig+0xf0>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001048:	4b6f      	ldr	r3, [pc, #444]	@ (8001208 <HAL_RCC_OscConfig+0x298>)
 800104a:	689b      	ldr	r3, [r3, #8]
 800104c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001050:	2b08      	cmp	r3, #8
 8001052:	d126      	bne.n	80010a2 <HAL_RCC_OscConfig+0x132>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001054:	4b6c      	ldr	r3, [pc, #432]	@ (8001208 <HAL_RCC_OscConfig+0x298>)
 8001056:	685b      	ldr	r3, [r3, #4]
 8001058:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800105c:	2b00      	cmp	r3, #0
 800105e:	d120      	bne.n	80010a2 <HAL_RCC_OscConfig+0x132>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001060:	4b69      	ldr	r3, [pc, #420]	@ (8001208 <HAL_RCC_OscConfig+0x298>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	f003 0302 	and.w	r3, r3, #2
 8001068:	2b00      	cmp	r3, #0
 800106a:	d005      	beq.n	8001078 <HAL_RCC_OscConfig+0x108>
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	68db      	ldr	r3, [r3, #12]
 8001070:	2b01      	cmp	r3, #1
 8001072:	d001      	beq.n	8001078 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001074:	2301      	movs	r3, #1
 8001076:	e1c0      	b.n	80013fa <HAL_RCC_OscConfig+0x48a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001078:	4b63      	ldr	r3, [pc, #396]	@ (8001208 <HAL_RCC_OscConfig+0x298>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	691b      	ldr	r3, [r3, #16]
 8001084:	21f8      	movs	r1, #248	@ 0xf8
 8001086:	61b9      	str	r1, [r7, #24]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001088:	69b9      	ldr	r1, [r7, #24]
 800108a:	fa91 f1a1 	rbit	r1, r1
 800108e:	6179      	str	r1, [r7, #20]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001090:	6979      	ldr	r1, [r7, #20]
 8001092:	fab1 f181 	clz	r1, r1
 8001096:	b2c9      	uxtb	r1, r1
 8001098:	408b      	lsls	r3, r1
 800109a:	495b      	ldr	r1, [pc, #364]	@ (8001208 <HAL_RCC_OscConfig+0x298>)
 800109c:	4313      	orrs	r3, r2
 800109e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80010a0:	e044      	b.n	800112c <HAL_RCC_OscConfig+0x1bc>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	68db      	ldr	r3, [r3, #12]
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d02a      	beq.n	8001100 <HAL_RCC_OscConfig+0x190>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80010aa:	4b59      	ldr	r3, [pc, #356]	@ (8001210 <HAL_RCC_OscConfig+0x2a0>)
 80010ac:	2201      	movs	r2, #1
 80010ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010b0:	f7ff fcba 	bl	8000a28 <HAL_GetTick>
 80010b4:	6238      	str	r0, [r7, #32]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010b6:	e008      	b.n	80010ca <HAL_RCC_OscConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80010b8:	f7ff fcb6 	bl	8000a28 <HAL_GetTick>
 80010bc:	4602      	mov	r2, r0
 80010be:	6a3b      	ldr	r3, [r7, #32]
 80010c0:	1ad3      	subs	r3, r2, r3
 80010c2:	2b02      	cmp	r3, #2
 80010c4:	d901      	bls.n	80010ca <HAL_RCC_OscConfig+0x15a>
          {
            return HAL_TIMEOUT;
 80010c6:	2303      	movs	r3, #3
 80010c8:	e197      	b.n	80013fa <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010ca:	4b4f      	ldr	r3, [pc, #316]	@ (8001208 <HAL_RCC_OscConfig+0x298>)
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	f003 0302 	and.w	r3, r3, #2
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d0f0      	beq.n	80010b8 <HAL_RCC_OscConfig+0x148>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010d6:	4b4c      	ldr	r3, [pc, #304]	@ (8001208 <HAL_RCC_OscConfig+0x298>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	691b      	ldr	r3, [r3, #16]
 80010e2:	21f8      	movs	r1, #248	@ 0xf8
 80010e4:	6139      	str	r1, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010e6:	6939      	ldr	r1, [r7, #16]
 80010e8:	fa91 f1a1 	rbit	r1, r1
 80010ec:	60f9      	str	r1, [r7, #12]
  return result;
 80010ee:	68f9      	ldr	r1, [r7, #12]
 80010f0:	fab1 f181 	clz	r1, r1
 80010f4:	b2c9      	uxtb	r1, r1
 80010f6:	408b      	lsls	r3, r1
 80010f8:	4943      	ldr	r1, [pc, #268]	@ (8001208 <HAL_RCC_OscConfig+0x298>)
 80010fa:	4313      	orrs	r3, r2
 80010fc:	600b      	str	r3, [r1, #0]
 80010fe:	e015      	b.n	800112c <HAL_RCC_OscConfig+0x1bc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001100:	4b43      	ldr	r3, [pc, #268]	@ (8001210 <HAL_RCC_OscConfig+0x2a0>)
 8001102:	2200      	movs	r2, #0
 8001104:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001106:	f7ff fc8f 	bl	8000a28 <HAL_GetTick>
 800110a:	6238      	str	r0, [r7, #32]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800110c:	e008      	b.n	8001120 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800110e:	f7ff fc8b 	bl	8000a28 <HAL_GetTick>
 8001112:	4602      	mov	r2, r0
 8001114:	6a3b      	ldr	r3, [r7, #32]
 8001116:	1ad3      	subs	r3, r2, r3
 8001118:	2b02      	cmp	r3, #2
 800111a:	d901      	bls.n	8001120 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 800111c:	2303      	movs	r3, #3
 800111e:	e16c      	b.n	80013fa <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001120:	4b39      	ldr	r3, [pc, #228]	@ (8001208 <HAL_RCC_OscConfig+0x298>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	f003 0302 	and.w	r3, r3, #2
 8001128:	2b00      	cmp	r3, #0
 800112a:	d1f0      	bne.n	800110e <HAL_RCC_OscConfig+0x19e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	f003 0308 	and.w	r3, r3, #8
 8001134:	2b00      	cmp	r3, #0
 8001136:	d030      	beq.n	800119a <HAL_RCC_OscConfig+0x22a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	695b      	ldr	r3, [r3, #20]
 800113c:	2b00      	cmp	r3, #0
 800113e:	d016      	beq.n	800116e <HAL_RCC_OscConfig+0x1fe>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001140:	4b34      	ldr	r3, [pc, #208]	@ (8001214 <HAL_RCC_OscConfig+0x2a4>)
 8001142:	2201      	movs	r2, #1
 8001144:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001146:	f7ff fc6f 	bl	8000a28 <HAL_GetTick>
 800114a:	6238      	str	r0, [r7, #32]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800114c:	e008      	b.n	8001160 <HAL_RCC_OscConfig+0x1f0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800114e:	f7ff fc6b 	bl	8000a28 <HAL_GetTick>
 8001152:	4602      	mov	r2, r0
 8001154:	6a3b      	ldr	r3, [r7, #32]
 8001156:	1ad3      	subs	r3, r2, r3
 8001158:	2b02      	cmp	r3, #2
 800115a:	d901      	bls.n	8001160 <HAL_RCC_OscConfig+0x1f0>
        {
          return HAL_TIMEOUT;
 800115c:	2303      	movs	r3, #3
 800115e:	e14c      	b.n	80013fa <HAL_RCC_OscConfig+0x48a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001160:	4b29      	ldr	r3, [pc, #164]	@ (8001208 <HAL_RCC_OscConfig+0x298>)
 8001162:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001164:	f003 0302 	and.w	r3, r3, #2
 8001168:	2b00      	cmp	r3, #0
 800116a:	d0f0      	beq.n	800114e <HAL_RCC_OscConfig+0x1de>
 800116c:	e015      	b.n	800119a <HAL_RCC_OscConfig+0x22a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800116e:	4b29      	ldr	r3, [pc, #164]	@ (8001214 <HAL_RCC_OscConfig+0x2a4>)
 8001170:	2200      	movs	r2, #0
 8001172:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001174:	f7ff fc58 	bl	8000a28 <HAL_GetTick>
 8001178:	6238      	str	r0, [r7, #32]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800117a:	e008      	b.n	800118e <HAL_RCC_OscConfig+0x21e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800117c:	f7ff fc54 	bl	8000a28 <HAL_GetTick>
 8001180:	4602      	mov	r2, r0
 8001182:	6a3b      	ldr	r3, [r7, #32]
 8001184:	1ad3      	subs	r3, r2, r3
 8001186:	2b02      	cmp	r3, #2
 8001188:	d901      	bls.n	800118e <HAL_RCC_OscConfig+0x21e>
        {
          return HAL_TIMEOUT;
 800118a:	2303      	movs	r3, #3
 800118c:	e135      	b.n	80013fa <HAL_RCC_OscConfig+0x48a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800118e:	4b1e      	ldr	r3, [pc, #120]	@ (8001208 <HAL_RCC_OscConfig+0x298>)
 8001190:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001192:	f003 0302 	and.w	r3, r3, #2
 8001196:	2b00      	cmp	r3, #0
 8001198:	d1f0      	bne.n	800117c <HAL_RCC_OscConfig+0x20c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	f003 0304 	and.w	r3, r3, #4
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	f000 8087 	beq.w	80012b6 <HAL_RCC_OscConfig+0x346>
  {
    FlagStatus       pwrclkchanged = RESET;
 80011a8:	2300      	movs	r3, #0
 80011aa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80011ae:	4b16      	ldr	r3, [pc, #88]	@ (8001208 <HAL_RCC_OscConfig+0x298>)
 80011b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d110      	bne.n	80011dc <HAL_RCC_OscConfig+0x26c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80011ba:	2300      	movs	r3, #0
 80011bc:	60bb      	str	r3, [r7, #8]
 80011be:	4b12      	ldr	r3, [pc, #72]	@ (8001208 <HAL_RCC_OscConfig+0x298>)
 80011c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011c2:	4a11      	ldr	r2, [pc, #68]	@ (8001208 <HAL_RCC_OscConfig+0x298>)
 80011c4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80011c8:	6413      	str	r3, [r2, #64]	@ 0x40
 80011ca:	4b0f      	ldr	r3, [pc, #60]	@ (8001208 <HAL_RCC_OscConfig+0x298>)
 80011cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80011d2:	60bb      	str	r3, [r7, #8]
 80011d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80011d6:	2301      	movs	r3, #1
 80011d8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80011dc:	4b0e      	ldr	r3, [pc, #56]	@ (8001218 <HAL_RCC_OscConfig+0x2a8>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	4a0d      	ldr	r2, [pc, #52]	@ (8001218 <HAL_RCC_OscConfig+0x2a8>)
 80011e2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80011e6:	6013      	str	r3, [r2, #0]

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011e8:	4b0b      	ldr	r3, [pc, #44]	@ (8001218 <HAL_RCC_OscConfig+0x2a8>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d122      	bne.n	800123a <HAL_RCC_OscConfig+0x2ca>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80011f4:	4b08      	ldr	r3, [pc, #32]	@ (8001218 <HAL_RCC_OscConfig+0x2a8>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	4a07      	ldr	r2, [pc, #28]	@ (8001218 <HAL_RCC_OscConfig+0x2a8>)
 80011fa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80011fe:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001200:	f7ff fc12 	bl	8000a28 <HAL_GetTick>
 8001204:	6238      	str	r0, [r7, #32]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001206:	e012      	b.n	800122e <HAL_RCC_OscConfig+0x2be>
 8001208:	40023800 	.word	0x40023800
 800120c:	40023802 	.word	0x40023802
 8001210:	42470000 	.word	0x42470000
 8001214:	42470e80 	.word	0x42470e80
 8001218:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800121c:	f7ff fc04 	bl	8000a28 <HAL_GetTick>
 8001220:	4602      	mov	r2, r0
 8001222:	6a3b      	ldr	r3, [r7, #32]
 8001224:	1ad3      	subs	r3, r2, r3
 8001226:	2b02      	cmp	r3, #2
 8001228:	d901      	bls.n	800122e <HAL_RCC_OscConfig+0x2be>
        {
          return HAL_TIMEOUT;
 800122a:	2303      	movs	r3, #3
 800122c:	e0e5      	b.n	80013fa <HAL_RCC_OscConfig+0x48a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800122e:	4b75      	ldr	r3, [pc, #468]	@ (8001404 <HAL_RCC_OscConfig+0x494>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001236:	2b00      	cmp	r3, #0
 8001238:	d0f0      	beq.n	800121c <HAL_RCC_OscConfig+0x2ac>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	689a      	ldr	r2, [r3, #8]
 800123e:	4b72      	ldr	r3, [pc, #456]	@ (8001408 <HAL_RCC_OscConfig+0x498>)
 8001240:	b2d2      	uxtb	r2, r2
 8001242:	701a      	strb	r2, [r3, #0]
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	689b      	ldr	r3, [r3, #8]
 8001248:	2b00      	cmp	r3, #0
 800124a:	d015      	beq.n	8001278 <HAL_RCC_OscConfig+0x308>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800124c:	f7ff fbec 	bl	8000a28 <HAL_GetTick>
 8001250:	6238      	str	r0, [r7, #32]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001252:	e00a      	b.n	800126a <HAL_RCC_OscConfig+0x2fa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001254:	f7ff fbe8 	bl	8000a28 <HAL_GetTick>
 8001258:	4602      	mov	r2, r0
 800125a:	6a3b      	ldr	r3, [r7, #32]
 800125c:	1ad3      	subs	r3, r2, r3
 800125e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001262:	4293      	cmp	r3, r2
 8001264:	d901      	bls.n	800126a <HAL_RCC_OscConfig+0x2fa>
        {
          return HAL_TIMEOUT;
 8001266:	2303      	movs	r3, #3
 8001268:	e0c7      	b.n	80013fa <HAL_RCC_OscConfig+0x48a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800126a:	4b68      	ldr	r3, [pc, #416]	@ (800140c <HAL_RCC_OscConfig+0x49c>)
 800126c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800126e:	f003 0302 	and.w	r3, r3, #2
 8001272:	2b00      	cmp	r3, #0
 8001274:	d0ee      	beq.n	8001254 <HAL_RCC_OscConfig+0x2e4>
 8001276:	e014      	b.n	80012a2 <HAL_RCC_OscConfig+0x332>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001278:	f7ff fbd6 	bl	8000a28 <HAL_GetTick>
 800127c:	6238      	str	r0, [r7, #32]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800127e:	e00a      	b.n	8001296 <HAL_RCC_OscConfig+0x326>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001280:	f7ff fbd2 	bl	8000a28 <HAL_GetTick>
 8001284:	4602      	mov	r2, r0
 8001286:	6a3b      	ldr	r3, [r7, #32]
 8001288:	1ad3      	subs	r3, r2, r3
 800128a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800128e:	4293      	cmp	r3, r2
 8001290:	d901      	bls.n	8001296 <HAL_RCC_OscConfig+0x326>
        {
          return HAL_TIMEOUT;
 8001292:	2303      	movs	r3, #3
 8001294:	e0b1      	b.n	80013fa <HAL_RCC_OscConfig+0x48a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001296:	4b5d      	ldr	r3, [pc, #372]	@ (800140c <HAL_RCC_OscConfig+0x49c>)
 8001298:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800129a:	f003 0302 	and.w	r3, r3, #2
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d1ee      	bne.n	8001280 <HAL_RCC_OscConfig+0x310>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80012a2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80012a6:	2b01      	cmp	r3, #1
 80012a8:	d105      	bne.n	80012b6 <HAL_RCC_OscConfig+0x346>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80012aa:	4b58      	ldr	r3, [pc, #352]	@ (800140c <HAL_RCC_OscConfig+0x49c>)
 80012ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012ae:	4a57      	ldr	r2, [pc, #348]	@ (800140c <HAL_RCC_OscConfig+0x49c>)
 80012b0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80012b4:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	699b      	ldr	r3, [r3, #24]
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	f000 809c 	beq.w	80013f8 <HAL_RCC_OscConfig+0x488>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80012c0:	4b52      	ldr	r3, [pc, #328]	@ (800140c <HAL_RCC_OscConfig+0x49c>)
 80012c2:	689b      	ldr	r3, [r3, #8]
 80012c4:	f003 030c 	and.w	r3, r3, #12
 80012c8:	2b08      	cmp	r3, #8
 80012ca:	d061      	beq.n	8001390 <HAL_RCC_OscConfig+0x420>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	699b      	ldr	r3, [r3, #24]
 80012d0:	2b02      	cmp	r3, #2
 80012d2:	d146      	bne.n	8001362 <HAL_RCC_OscConfig+0x3f2>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80012d4:	4b4e      	ldr	r3, [pc, #312]	@ (8001410 <HAL_RCC_OscConfig+0x4a0>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012da:	f7ff fba5 	bl	8000a28 <HAL_GetTick>
 80012de:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80012e0:	e008      	b.n	80012f4 <HAL_RCC_OscConfig+0x384>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80012e2:	f7ff fba1 	bl	8000a28 <HAL_GetTick>
 80012e6:	4602      	mov	r2, r0
 80012e8:	6a3b      	ldr	r3, [r7, #32]
 80012ea:	1ad3      	subs	r3, r2, r3
 80012ec:	2b64      	cmp	r3, #100	@ 0x64
 80012ee:	d901      	bls.n	80012f4 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 80012f0:	2303      	movs	r3, #3
 80012f2:	e082      	b.n	80013fa <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80012f4:	4b45      	ldr	r3, [pc, #276]	@ (800140c <HAL_RCC_OscConfig+0x49c>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d1f0      	bne.n	80012e2 <HAL_RCC_OscConfig+0x372>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001300:	4b42      	ldr	r3, [pc, #264]	@ (800140c <HAL_RCC_OscConfig+0x49c>)
 8001302:	685a      	ldr	r2, [r3, #4]
 8001304:	4b43      	ldr	r3, [pc, #268]	@ (8001414 <HAL_RCC_OscConfig+0x4a4>)
 8001306:	4013      	ands	r3, r2
 8001308:	687a      	ldr	r2, [r7, #4]
 800130a:	69d1      	ldr	r1, [r2, #28]
 800130c:	687a      	ldr	r2, [r7, #4]
 800130e:	6a12      	ldr	r2, [r2, #32]
 8001310:	4311      	orrs	r1, r2
 8001312:	687a      	ldr	r2, [r7, #4]
 8001314:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001316:	0192      	lsls	r2, r2, #6
 8001318:	4311      	orrs	r1, r2
 800131a:	687a      	ldr	r2, [r7, #4]
 800131c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800131e:	0612      	lsls	r2, r2, #24
 8001320:	4311      	orrs	r1, r2
 8001322:	687a      	ldr	r2, [r7, #4]
 8001324:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8001326:	0852      	lsrs	r2, r2, #1
 8001328:	3a01      	subs	r2, #1
 800132a:	0412      	lsls	r2, r2, #16
 800132c:	430a      	orrs	r2, r1
 800132e:	4937      	ldr	r1, [pc, #220]	@ (800140c <HAL_RCC_OscConfig+0x49c>)
 8001330:	4313      	orrs	r3, r2
 8001332:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001334:	4b36      	ldr	r3, [pc, #216]	@ (8001410 <HAL_RCC_OscConfig+0x4a0>)
 8001336:	2201      	movs	r2, #1
 8001338:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800133a:	f7ff fb75 	bl	8000a28 <HAL_GetTick>
 800133e:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001340:	e008      	b.n	8001354 <HAL_RCC_OscConfig+0x3e4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001342:	f7ff fb71 	bl	8000a28 <HAL_GetTick>
 8001346:	4602      	mov	r2, r0
 8001348:	6a3b      	ldr	r3, [r7, #32]
 800134a:	1ad3      	subs	r3, r2, r3
 800134c:	2b64      	cmp	r3, #100	@ 0x64
 800134e:	d901      	bls.n	8001354 <HAL_RCC_OscConfig+0x3e4>
          {
            return HAL_TIMEOUT;
 8001350:	2303      	movs	r3, #3
 8001352:	e052      	b.n	80013fa <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001354:	4b2d      	ldr	r3, [pc, #180]	@ (800140c <HAL_RCC_OscConfig+0x49c>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800135c:	2b00      	cmp	r3, #0
 800135e:	d0f0      	beq.n	8001342 <HAL_RCC_OscConfig+0x3d2>
 8001360:	e04a      	b.n	80013f8 <HAL_RCC_OscConfig+0x488>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001362:	4b2b      	ldr	r3, [pc, #172]	@ (8001410 <HAL_RCC_OscConfig+0x4a0>)
 8001364:	2200      	movs	r2, #0
 8001366:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001368:	f7ff fb5e 	bl	8000a28 <HAL_GetTick>
 800136c:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800136e:	e008      	b.n	8001382 <HAL_RCC_OscConfig+0x412>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001370:	f7ff fb5a 	bl	8000a28 <HAL_GetTick>
 8001374:	4602      	mov	r2, r0
 8001376:	6a3b      	ldr	r3, [r7, #32]
 8001378:	1ad3      	subs	r3, r2, r3
 800137a:	2b64      	cmp	r3, #100	@ 0x64
 800137c:	d901      	bls.n	8001382 <HAL_RCC_OscConfig+0x412>
          {
            return HAL_TIMEOUT;
 800137e:	2303      	movs	r3, #3
 8001380:	e03b      	b.n	80013fa <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001382:	4b22      	ldr	r3, [pc, #136]	@ (800140c <HAL_RCC_OscConfig+0x49c>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800138a:	2b00      	cmp	r3, #0
 800138c:	d1f0      	bne.n	8001370 <HAL_RCC_OscConfig+0x400>
 800138e:	e033      	b.n	80013f8 <HAL_RCC_OscConfig+0x488>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	699b      	ldr	r3, [r3, #24]
 8001394:	2b01      	cmp	r3, #1
 8001396:	d101      	bne.n	800139c <HAL_RCC_OscConfig+0x42c>
      {
        return HAL_ERROR;
 8001398:	2301      	movs	r3, #1
 800139a:	e02e      	b.n	80013fa <HAL_RCC_OscConfig+0x48a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        uint32_t pllcfgr = RCC->PLLCFGR;
 800139c:	4b1b      	ldr	r3, [pc, #108]	@ (800140c <HAL_RCC_OscConfig+0x49c>)
 800139e:	685b      	ldr	r3, [r3, #4]
 80013a0:	61fb      	str	r3, [r7, #28]
      
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80013a2:	69fb      	ldr	r3, [r7, #28]
 80013a4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	69db      	ldr	r3, [r3, #28]
 80013ac:	429a      	cmp	r2, r3
 80013ae:	d121      	bne.n	80013f4 <HAL_RCC_OscConfig+0x484>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80013b0:	69fb      	ldr	r3, [r7, #28]
 80013b2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80013ba:	429a      	cmp	r2, r3
 80013bc:	d11a      	bne.n	80013f4 <HAL_RCC_OscConfig+0x484>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80013be:	69fa      	ldr	r2, [r7, #28]
 80013c0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80013c4:	4013      	ands	r3, r2
 80013c6:	687a      	ldr	r2, [r7, #4]
 80013c8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80013ca:	0192      	lsls	r2, r2, #6
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80013cc:	4293      	cmp	r3, r2
 80013ce:	d111      	bne.n	80013f4 <HAL_RCC_OscConfig+0x484>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80013d0:	69fb      	ldr	r3, [r7, #28]
 80013d2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80013da:	085b      	lsrs	r3, r3, #1
 80013dc:	3b01      	subs	r3, #1
 80013de:	041b      	lsls	r3, r3, #16
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80013e0:	429a      	cmp	r2, r3
 80013e2:	d107      	bne.n	80013f4 <HAL_RCC_OscConfig+0x484>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80013e4:	69fb      	ldr	r3, [r7, #28]
 80013e6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80013ee:	061b      	lsls	r3, r3, #24
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80013f0:	429a      	cmp	r2, r3
 80013f2:	d001      	beq.n	80013f8 <HAL_RCC_OscConfig+0x488>
        {
          return HAL_ERROR;
 80013f4:	2301      	movs	r3, #1
 80013f6:	e000      	b.n	80013fa <HAL_RCC_OscConfig+0x48a>
        }
      }
    }
  }
  return HAL_OK;
 80013f8:	2300      	movs	r3, #0
}
 80013fa:	4618      	mov	r0, r3
 80013fc:	3728      	adds	r7, #40	@ 0x28
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}
 8001402:	bf00      	nop
 8001404:	40007000 	.word	0x40007000
 8001408:	40023870 	.word	0x40023870
 800140c:	40023800 	.word	0x40023800
 8001410:	42470060 	.word	0x42470060
 8001414:	f0bc8000 	.word	0xf0bc8000

08001418 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b086      	sub	sp, #24
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
 8001420:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	2b00      	cmp	r3, #0
 8001426:	d101      	bne.n	800142c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001428:	2301      	movs	r3, #1
 800142a:	e0d2      	b.n	80015d2 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800142c:	4b6b      	ldr	r3, [pc, #428]	@ (80015dc <HAL_RCC_ClockConfig+0x1c4>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	f003 030f 	and.w	r3, r3, #15
 8001434:	683a      	ldr	r2, [r7, #0]
 8001436:	429a      	cmp	r2, r3
 8001438:	d90c      	bls.n	8001454 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800143a:	4b68      	ldr	r3, [pc, #416]	@ (80015dc <HAL_RCC_ClockConfig+0x1c4>)
 800143c:	683a      	ldr	r2, [r7, #0]
 800143e:	b2d2      	uxtb	r2, r2
 8001440:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001442:	4b66      	ldr	r3, [pc, #408]	@ (80015dc <HAL_RCC_ClockConfig+0x1c4>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	f003 030f 	and.w	r3, r3, #15
 800144a:	683a      	ldr	r2, [r7, #0]
 800144c:	429a      	cmp	r2, r3
 800144e:	d001      	beq.n	8001454 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001450:	2301      	movs	r3, #1
 8001452:	e0be      	b.n	80015d2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	f003 0302 	and.w	r3, r3, #2
 800145c:	2b00      	cmp	r3, #0
 800145e:	d020      	beq.n	80014a2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	f003 0304 	and.w	r3, r3, #4
 8001468:	2b00      	cmp	r3, #0
 800146a:	d005      	beq.n	8001478 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800146c:	4b5c      	ldr	r3, [pc, #368]	@ (80015e0 <HAL_RCC_ClockConfig+0x1c8>)
 800146e:	689b      	ldr	r3, [r3, #8]
 8001470:	4a5b      	ldr	r2, [pc, #364]	@ (80015e0 <HAL_RCC_ClockConfig+0x1c8>)
 8001472:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001476:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	f003 0308 	and.w	r3, r3, #8
 8001480:	2b00      	cmp	r3, #0
 8001482:	d005      	beq.n	8001490 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3U));
 8001484:	4b56      	ldr	r3, [pc, #344]	@ (80015e0 <HAL_RCC_ClockConfig+0x1c8>)
 8001486:	689b      	ldr	r3, [r3, #8]
 8001488:	4a55      	ldr	r2, [pc, #340]	@ (80015e0 <HAL_RCC_ClockConfig+0x1c8>)
 800148a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800148e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001490:	4b53      	ldr	r3, [pc, #332]	@ (80015e0 <HAL_RCC_ClockConfig+0x1c8>)
 8001492:	689b      	ldr	r3, [r3, #8]
 8001494:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	689b      	ldr	r3, [r3, #8]
 800149c:	4950      	ldr	r1, [pc, #320]	@ (80015e0 <HAL_RCC_ClockConfig+0x1c8>)
 800149e:	4313      	orrs	r3, r2
 80014a0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	f003 0301 	and.w	r3, r3, #1
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d040      	beq.n	8001530 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	685b      	ldr	r3, [r3, #4]
 80014b2:	2b01      	cmp	r3, #1
 80014b4:	d107      	bne.n	80014c6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014b6:	4b4a      	ldr	r3, [pc, #296]	@ (80015e0 <HAL_RCC_ClockConfig+0x1c8>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d115      	bne.n	80014ee <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80014c2:	2301      	movs	r3, #1
 80014c4:	e085      	b.n	80015d2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	685b      	ldr	r3, [r3, #4]
 80014ca:	2b02      	cmp	r3, #2
 80014cc:	d107      	bne.n	80014de <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014ce:	4b44      	ldr	r3, [pc, #272]	@ (80015e0 <HAL_RCC_ClockConfig+0x1c8>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d109      	bne.n	80014ee <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80014da:	2301      	movs	r3, #1
 80014dc:	e079      	b.n	80015d2 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014de:	4b40      	ldr	r3, [pc, #256]	@ (80015e0 <HAL_RCC_ClockConfig+0x1c8>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	f003 0302 	and.w	r3, r3, #2
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d101      	bne.n	80014ee <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80014ea:	2301      	movs	r3, #1
 80014ec:	e071      	b.n	80015d2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80014ee:	4b3c      	ldr	r3, [pc, #240]	@ (80015e0 <HAL_RCC_ClockConfig+0x1c8>)
 80014f0:	689b      	ldr	r3, [r3, #8]
 80014f2:	f023 0203 	bic.w	r2, r3, #3
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	685b      	ldr	r3, [r3, #4]
 80014fa:	4939      	ldr	r1, [pc, #228]	@ (80015e0 <HAL_RCC_ClockConfig+0x1c8>)
 80014fc:	4313      	orrs	r3, r2
 80014fe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001500:	f7ff fa92 	bl	8000a28 <HAL_GetTick>
 8001504:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001506:	e00a      	b.n	800151e <HAL_RCC_ClockConfig+0x106>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001508:	f7ff fa8e 	bl	8000a28 <HAL_GetTick>
 800150c:	4602      	mov	r2, r0
 800150e:	697b      	ldr	r3, [r7, #20]
 8001510:	1ad3      	subs	r3, r2, r3
 8001512:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001516:	4293      	cmp	r3, r2
 8001518:	d901      	bls.n	800151e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800151a:	2303      	movs	r3, #3
 800151c:	e059      	b.n	80015d2 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800151e:	4b30      	ldr	r3, [pc, #192]	@ (80015e0 <HAL_RCC_ClockConfig+0x1c8>)
 8001520:	689b      	ldr	r3, [r3, #8]
 8001522:	f003 020c 	and.w	r2, r3, #12
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	685b      	ldr	r3, [r3, #4]
 800152a:	009b      	lsls	r3, r3, #2
 800152c:	429a      	cmp	r2, r3
 800152e:	d1eb      	bne.n	8001508 <HAL_RCC_ClockConfig+0xf0>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001530:	4b2a      	ldr	r3, [pc, #168]	@ (80015dc <HAL_RCC_ClockConfig+0x1c4>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	f003 030f 	and.w	r3, r3, #15
 8001538:	683a      	ldr	r2, [r7, #0]
 800153a:	429a      	cmp	r2, r3
 800153c:	d20c      	bcs.n	8001558 <HAL_RCC_ClockConfig+0x140>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800153e:	4b27      	ldr	r3, [pc, #156]	@ (80015dc <HAL_RCC_ClockConfig+0x1c4>)
 8001540:	683a      	ldr	r2, [r7, #0]
 8001542:	b2d2      	uxtb	r2, r2
 8001544:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001546:	4b25      	ldr	r3, [pc, #148]	@ (80015dc <HAL_RCC_ClockConfig+0x1c4>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f003 030f 	and.w	r3, r3, #15
 800154e:	683a      	ldr	r2, [r7, #0]
 8001550:	429a      	cmp	r2, r3
 8001552:	d001      	beq.n	8001558 <HAL_RCC_ClockConfig+0x140>
    {
      return HAL_ERROR;
 8001554:	2301      	movs	r3, #1
 8001556:	e03c      	b.n	80015d2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	f003 0304 	and.w	r3, r3, #4
 8001560:	2b00      	cmp	r3, #0
 8001562:	d008      	beq.n	8001576 <HAL_RCC_ClockConfig+0x15e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001564:	4b1e      	ldr	r3, [pc, #120]	@ (80015e0 <HAL_RCC_ClockConfig+0x1c8>)
 8001566:	689b      	ldr	r3, [r3, #8]
 8001568:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	68db      	ldr	r3, [r3, #12]
 8001570:	491b      	ldr	r1, [pc, #108]	@ (80015e0 <HAL_RCC_ClockConfig+0x1c8>)
 8001572:	4313      	orrs	r3, r2
 8001574:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	f003 0308 	and.w	r3, r3, #8
 800157e:	2b00      	cmp	r3, #0
 8001580:	d009      	beq.n	8001596 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001582:	4b17      	ldr	r3, [pc, #92]	@ (80015e0 <HAL_RCC_ClockConfig+0x1c8>)
 8001584:	689b      	ldr	r3, [r3, #8]
 8001586:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	691b      	ldr	r3, [r3, #16]
 800158e:	00db      	lsls	r3, r3, #3
 8001590:	4913      	ldr	r1, [pc, #76]	@ (80015e0 <HAL_RCC_ClockConfig+0x1c8>)
 8001592:	4313      	orrs	r3, r2
 8001594:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 8001596:	f000 f82b 	bl	80015f0 <HAL_RCC_GetSysClockFreq>
 800159a:	4601      	mov	r1, r0
 800159c:	4b10      	ldr	r3, [pc, #64]	@ (80015e0 <HAL_RCC_ClockConfig+0x1c8>)
 800159e:	689b      	ldr	r3, [r3, #8]
 80015a0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80015a4:	22f0      	movs	r2, #240	@ 0xf0
 80015a6:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015a8:	693a      	ldr	r2, [r7, #16]
 80015aa:	fa92 f2a2 	rbit	r2, r2
 80015ae:	60fa      	str	r2, [r7, #12]
  return result;
 80015b0:	68fa      	ldr	r2, [r7, #12]
 80015b2:	fab2 f282 	clz	r2, r2
 80015b6:	b2d2      	uxtb	r2, r2
 80015b8:	40d3      	lsrs	r3, r2
 80015ba:	4a0a      	ldr	r2, [pc, #40]	@ (80015e4 <HAL_RCC_ClockConfig+0x1cc>)
 80015bc:	5cd3      	ldrb	r3, [r2, r3]
 80015be:	fa21 f303 	lsr.w	r3, r1, r3
 80015c2:	4a09      	ldr	r2, [pc, #36]	@ (80015e8 <HAL_RCC_ClockConfig+0x1d0>)
 80015c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80015c6:	4b09      	ldr	r3, [pc, #36]	@ (80015ec <HAL_RCC_ClockConfig+0x1d4>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	4618      	mov	r0, r3
 80015cc:	f7ff f9ea 	bl	80009a4 <HAL_InitTick>

  return HAL_OK;
 80015d0:	2300      	movs	r3, #0
}
 80015d2:	4618      	mov	r0, r3
 80015d4:	3718      	adds	r7, #24
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd80      	pop	{r7, pc}
 80015da:	bf00      	nop
 80015dc:	40023c00 	.word	0x40023c00
 80015e0:	40023800 	.word	0x40023800
 80015e4:	08001878 	.word	0x08001878
 80015e8:	20000000 	.word	0x20000000
 80015ec:	20000004 	.word	0x20000004

080015f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80015f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80015f4:	b094      	sub	sp, #80	@ 0x50
 80015f6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80015f8:	2300      	movs	r3, #0
 80015fa:	647b      	str	r3, [r7, #68]	@ 0x44
 80015fc:	2300      	movs	r3, #0
 80015fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001600:	2300      	movs	r3, #0
 8001602:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8001604:	2300      	movs	r3, #0
 8001606:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001608:	4b7c      	ldr	r3, [pc, #496]	@ (80017fc <HAL_RCC_GetSysClockFreq+0x20c>)
 800160a:	689b      	ldr	r3, [r3, #8]
 800160c:	f003 030c 	and.w	r3, r3, #12
 8001610:	2b08      	cmp	r3, #8
 8001612:	d00d      	beq.n	8001630 <HAL_RCC_GetSysClockFreq+0x40>
 8001614:	2b08      	cmp	r3, #8
 8001616:	f200 80e7 	bhi.w	80017e8 <HAL_RCC_GetSysClockFreq+0x1f8>
 800161a:	2b00      	cmp	r3, #0
 800161c:	d002      	beq.n	8001624 <HAL_RCC_GetSysClockFreq+0x34>
 800161e:	2b04      	cmp	r3, #4
 8001620:	d003      	beq.n	800162a <HAL_RCC_GetSysClockFreq+0x3a>
 8001622:	e0e1      	b.n	80017e8 <HAL_RCC_GetSysClockFreq+0x1f8>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001624:	4b76      	ldr	r3, [pc, #472]	@ (8001800 <HAL_RCC_GetSysClockFreq+0x210>)
 8001626:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8001628:	e0e1      	b.n	80017ee <HAL_RCC_GetSysClockFreq+0x1fe>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800162a:	4b76      	ldr	r3, [pc, #472]	@ (8001804 <HAL_RCC_GetSysClockFreq+0x214>)
 800162c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800162e:	e0de      	b.n	80017ee <HAL_RCC_GetSysClockFreq+0x1fe>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001630:	4b72      	ldr	r3, [pc, #456]	@ (80017fc <HAL_RCC_GetSysClockFreq+0x20c>)
 8001632:	685b      	ldr	r3, [r3, #4]
 8001634:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001638:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800163a:	4b70      	ldr	r3, [pc, #448]	@ (80017fc <HAL_RCC_GetSysClockFreq+0x20c>)
 800163c:	685b      	ldr	r3, [r3, #4]
 800163e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001642:	2b00      	cmp	r3, #0
 8001644:	d065      	beq.n	8001712 <HAL_RCC_GetSysClockFreq+0x122>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001646:	4b6d      	ldr	r3, [pc, #436]	@ (80017fc <HAL_RCC_GetSysClockFreq+0x20c>)
 8001648:	685b      	ldr	r3, [r3, #4]
 800164a:	099b      	lsrs	r3, r3, #6
 800164c:	2200      	movs	r2, #0
 800164e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001650:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001652:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001654:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001658:	633b      	str	r3, [r7, #48]	@ 0x30
 800165a:	2300      	movs	r3, #0
 800165c:	637b      	str	r3, [r7, #52]	@ 0x34
 800165e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001662:	4622      	mov	r2, r4
 8001664:	462b      	mov	r3, r5
 8001666:	f04f 0000 	mov.w	r0, #0
 800166a:	f04f 0100 	mov.w	r1, #0
 800166e:	0159      	lsls	r1, r3, #5
 8001670:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001674:	0150      	lsls	r0, r2, #5
 8001676:	4602      	mov	r2, r0
 8001678:	460b      	mov	r3, r1
 800167a:	4621      	mov	r1, r4
 800167c:	1a51      	subs	r1, r2, r1
 800167e:	6139      	str	r1, [r7, #16]
 8001680:	4629      	mov	r1, r5
 8001682:	eb63 0301 	sbc.w	r3, r3, r1
 8001686:	617b      	str	r3, [r7, #20]
 8001688:	f04f 0200 	mov.w	r2, #0
 800168c:	f04f 0300 	mov.w	r3, #0
 8001690:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001694:	4659      	mov	r1, fp
 8001696:	018b      	lsls	r3, r1, #6
 8001698:	4651      	mov	r1, sl
 800169a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800169e:	4651      	mov	r1, sl
 80016a0:	018a      	lsls	r2, r1, #6
 80016a2:	46d4      	mov	ip, sl
 80016a4:	ebb2 080c 	subs.w	r8, r2, ip
 80016a8:	4659      	mov	r1, fp
 80016aa:	eb63 0901 	sbc.w	r9, r3, r1
 80016ae:	f04f 0200 	mov.w	r2, #0
 80016b2:	f04f 0300 	mov.w	r3, #0
 80016b6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80016ba:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80016be:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80016c2:	4690      	mov	r8, r2
 80016c4:	4699      	mov	r9, r3
 80016c6:	4623      	mov	r3, r4
 80016c8:	eb18 0303 	adds.w	r3, r8, r3
 80016cc:	60bb      	str	r3, [r7, #8]
 80016ce:	462b      	mov	r3, r5
 80016d0:	eb49 0303 	adc.w	r3, r9, r3
 80016d4:	60fb      	str	r3, [r7, #12]
 80016d6:	f04f 0200 	mov.w	r2, #0
 80016da:	f04f 0300 	mov.w	r3, #0
 80016de:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80016e2:	4629      	mov	r1, r5
 80016e4:	024b      	lsls	r3, r1, #9
 80016e6:	4620      	mov	r0, r4
 80016e8:	4629      	mov	r1, r5
 80016ea:	4604      	mov	r4, r0
 80016ec:	ea43 53d4 	orr.w	r3, r3, r4, lsr #23
 80016f0:	4601      	mov	r1, r0
 80016f2:	024a      	lsls	r2, r1, #9
 80016f4:	4610      	mov	r0, r2
 80016f6:	4619      	mov	r1, r3
 80016f8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80016fa:	2200      	movs	r2, #0
 80016fc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80016fe:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001700:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001704:	f7fe fd5e 	bl	80001c4 <__aeabi_uldivmod>
 8001708:	4602      	mov	r2, r0
 800170a:	460b      	mov	r3, r1
 800170c:	4613      	mov	r3, r2
 800170e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001710:	e05c      	b.n	80017cc <HAL_RCC_GetSysClockFreq+0x1dc>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001712:	4b3a      	ldr	r3, [pc, #232]	@ (80017fc <HAL_RCC_GetSysClockFreq+0x20c>)
 8001714:	685b      	ldr	r3, [r3, #4]
 8001716:	099b      	lsrs	r3, r3, #6
 8001718:	2200      	movs	r2, #0
 800171a:	4618      	mov	r0, r3
 800171c:	4611      	mov	r1, r2
 800171e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001722:	623b      	str	r3, [r7, #32]
 8001724:	2300      	movs	r3, #0
 8001726:	627b      	str	r3, [r7, #36]	@ 0x24
 8001728:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800172c:	4642      	mov	r2, r8
 800172e:	464b      	mov	r3, r9
 8001730:	f04f 0000 	mov.w	r0, #0
 8001734:	f04f 0100 	mov.w	r1, #0
 8001738:	0159      	lsls	r1, r3, #5
 800173a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800173e:	0150      	lsls	r0, r2, #5
 8001740:	4602      	mov	r2, r0
 8001742:	460b      	mov	r3, r1
 8001744:	46c4      	mov	ip, r8
 8001746:	ebb2 0a0c 	subs.w	sl, r2, ip
 800174a:	4640      	mov	r0, r8
 800174c:	4649      	mov	r1, r9
 800174e:	468c      	mov	ip, r1
 8001750:	eb63 0b0c 	sbc.w	fp, r3, ip
 8001754:	f04f 0200 	mov.w	r2, #0
 8001758:	f04f 0300 	mov.w	r3, #0
 800175c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001760:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001764:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001768:	ebb2 040a 	subs.w	r4, r2, sl
 800176c:	eb63 050b 	sbc.w	r5, r3, fp
 8001770:	f04f 0200 	mov.w	r2, #0
 8001774:	f04f 0300 	mov.w	r3, #0
 8001778:	00eb      	lsls	r3, r5, #3
 800177a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800177e:	00e2      	lsls	r2, r4, #3
 8001780:	4614      	mov	r4, r2
 8001782:	461d      	mov	r5, r3
 8001784:	4603      	mov	r3, r0
 8001786:	18e3      	adds	r3, r4, r3
 8001788:	603b      	str	r3, [r7, #0]
 800178a:	460b      	mov	r3, r1
 800178c:	eb45 0303 	adc.w	r3, r5, r3
 8001790:	607b      	str	r3, [r7, #4]
 8001792:	f04f 0200 	mov.w	r2, #0
 8001796:	f04f 0300 	mov.w	r3, #0
 800179a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800179e:	4629      	mov	r1, r5
 80017a0:	028b      	lsls	r3, r1, #10
 80017a2:	4620      	mov	r0, r4
 80017a4:	4629      	mov	r1, r5
 80017a6:	4604      	mov	r4, r0
 80017a8:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 80017ac:	4601      	mov	r1, r0
 80017ae:	028a      	lsls	r2, r1, #10
 80017b0:	4610      	mov	r0, r2
 80017b2:	4619      	mov	r1, r3
 80017b4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80017b6:	2200      	movs	r2, #0
 80017b8:	61bb      	str	r3, [r7, #24]
 80017ba:	61fa      	str	r2, [r7, #28]
 80017bc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80017c0:	f7fe fd00 	bl	80001c4 <__aeabi_uldivmod>
 80017c4:	4602      	mov	r2, r0
 80017c6:	460b      	mov	r3, r1
 80017c8:	4613      	mov	r3, r2
 80017ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80017cc:	4b0b      	ldr	r3, [pc, #44]	@ (80017fc <HAL_RCC_GetSysClockFreq+0x20c>)
 80017ce:	685b      	ldr	r3, [r3, #4]
 80017d0:	0c1b      	lsrs	r3, r3, #16
 80017d2:	f003 0303 	and.w	r3, r3, #3
 80017d6:	3301      	adds	r3, #1
 80017d8:	005b      	lsls	r3, r3, #1
 80017da:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 80017dc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80017de:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80017e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80017e4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80017e6:	e002      	b.n	80017ee <HAL_RCC_GetSysClockFreq+0x1fe>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80017e8:	4b05      	ldr	r3, [pc, #20]	@ (8001800 <HAL_RCC_GetSysClockFreq+0x210>)
 80017ea:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80017ec:	bf00      	nop
    }
  }
  return sysclockfreq;
 80017ee:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80017f0:	4618      	mov	r0, r3
 80017f2:	3750      	adds	r7, #80	@ 0x50
 80017f4:	46bd      	mov	sp, r7
 80017f6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80017fa:	bf00      	nop
 80017fc:	40023800 	.word	0x40023800
 8001800:	00f42400 	.word	0x00f42400
 8001804:	007a1200 	.word	0x007a1200

08001808 <memset>:
 8001808:	4603      	mov	r3, r0
 800180a:	4402      	add	r2, r0
 800180c:	4293      	cmp	r3, r2
 800180e:	d100      	bne.n	8001812 <memset+0xa>
 8001810:	4770      	bx	lr
 8001812:	f803 1b01 	strb.w	r1, [r3], #1
 8001816:	e7f9      	b.n	800180c <memset+0x4>

08001818 <__libc_init_array>:
 8001818:	b570      	push	{r4, r5, r6, lr}
 800181a:	2600      	movs	r6, #0
 800181c:	4d0c      	ldr	r5, [pc, #48]	@ (8001850 <__libc_init_array+0x38>)
 800181e:	4c0d      	ldr	r4, [pc, #52]	@ (8001854 <__libc_init_array+0x3c>)
 8001820:	1b64      	subs	r4, r4, r5
 8001822:	10a4      	asrs	r4, r4, #2
 8001824:	42a6      	cmp	r6, r4
 8001826:	d109      	bne.n	800183c <__libc_init_array+0x24>
 8001828:	f000 f81a 	bl	8001860 <_init>
 800182c:	2600      	movs	r6, #0
 800182e:	4d0a      	ldr	r5, [pc, #40]	@ (8001858 <__libc_init_array+0x40>)
 8001830:	4c0a      	ldr	r4, [pc, #40]	@ (800185c <__libc_init_array+0x44>)
 8001832:	1b64      	subs	r4, r4, r5
 8001834:	10a4      	asrs	r4, r4, #2
 8001836:	42a6      	cmp	r6, r4
 8001838:	d105      	bne.n	8001846 <__libc_init_array+0x2e>
 800183a:	bd70      	pop	{r4, r5, r6, pc}
 800183c:	f855 3b04 	ldr.w	r3, [r5], #4
 8001840:	4798      	blx	r3
 8001842:	3601      	adds	r6, #1
 8001844:	e7ee      	b.n	8001824 <__libc_init_array+0xc>
 8001846:	f855 3b04 	ldr.w	r3, [r5], #4
 800184a:	4798      	blx	r3
 800184c:	3601      	adds	r6, #1
 800184e:	e7f2      	b.n	8001836 <__libc_init_array+0x1e>
 8001850:	08001890 	.word	0x08001890
 8001854:	08001890 	.word	0x08001890
 8001858:	08001890 	.word	0x08001890
 800185c:	08001894 	.word	0x08001894

08001860 <_init>:
 8001860:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001862:	bf00      	nop
 8001864:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001866:	bc08      	pop	{r3}
 8001868:	469e      	mov	lr, r3
 800186a:	4770      	bx	lr

0800186c <_fini>:
 800186c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800186e:	bf00      	nop
 8001870:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001872:	bc08      	pop	{r3}
 8001874:	469e      	mov	lr, r3
 8001876:	4770      	bx	lr
